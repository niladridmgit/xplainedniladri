
SAMBA_BOOTLOADER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d48  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00001d48  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000210  20000004  00001d4c  00020004  2**2
                  ALLOC
  3 .stack        00000404  20000214  00001f5c  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e33d  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000305d  00000000  00000000  0003e3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000430  00000000  00000000  0004141f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000498  00000000  00000000  0004184f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001ed59  00000000  00000000  00041ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b46e  00000000  00000000  00060a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000a0457  00000000  00000000  0006beae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000a60  00000000  00000000  0010c308  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004764  00000000  00000000  0010cd68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 06 00 20 0d 10 00 00 09 10 00 00 09 10 00 00     ... ............
	...
      2c:	09 10 00 00 00 00 00 00 00 00 00 00 09 10 00 00     ................
      3c:	09 10 00 00 09 10 00 00 09 10 00 00 09 10 00 00     ................
      4c:	09 10 00 00 09 10 00 00 09 10 00 00 09 10 00 00     ................
      5c:	09 10 00 00 09 10 00 00 cd 05 00 00 dd 05 00 00     ................
      6c:	ed 05 00 00 fd 05 00 00 0d 06 00 00 1d 06 00 00     ................
      7c:	09 10 00 00 09 10 00 00 09 10 00 00 09 10 00 00     ................
      8c:	09 10 00 00 09 10 00 00 09 10 00 00 09 10 00 00     ................
      9c:	09 10 00 00 09 10 00 00 09 10 00 00 09 10 00 00     ................
      ac:	09 10 00 00 09 10 00 00 09 10 00 00 09 10 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000004 	.word	0x20000004
      dc:	00000000 	.word	0x00000000
      e0:	00001d48 	.word	0x00001d48

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000008 	.word	0x20000008
     110:	00001d48 	.word	0x00001d48
     114:	00001d48 	.word	0x00001d48
     118:	00000000 	.word	0x00000000

0000011c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     11c:	4b0c      	ldr	r3, [pc, #48]	; (150 <cpu_irq_enter_critical+0x34>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d106      	bne.n	132 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     128:	2b00      	cmp	r3, #0
     12a:	d007      	beq.n	13c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     12c:	2200      	movs	r2, #0
     12e:	4b09      	ldr	r3, [pc, #36]	; (154 <cpu_irq_enter_critical+0x38>)
     130:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     132:	4a07      	ldr	r2, [pc, #28]	; (150 <cpu_irq_enter_critical+0x34>)
     134:	6813      	ldr	r3, [r2, #0]
     136:	3301      	adds	r3, #1
     138:	6013      	str	r3, [r2, #0]
}
     13a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     13c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     13e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     142:	2200      	movs	r2, #0
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_enter_critical+0x3c>)
     146:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     148:	3201      	adds	r2, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x38>)
     14c:	701a      	strb	r2, [r3, #0]
     14e:	e7f0      	b.n	132 <cpu_irq_enter_critical+0x16>
     150:	20000020 	.word	0x20000020
     154:	20000024 	.word	0x20000024
     158:	20000000 	.word	0x20000000

0000015c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     15c:	4b08      	ldr	r3, [pc, #32]	; (180 <cpu_irq_leave_critical+0x24>)
     15e:	681a      	ldr	r2, [r3, #0]
     160:	3a01      	subs	r2, #1
     162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     164:	681b      	ldr	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d109      	bne.n	17e <cpu_irq_leave_critical+0x22>
     16a:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_leave_critical+0x28>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d005      	beq.n	17e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     172:	2201      	movs	r2, #1
     174:	4b04      	ldr	r3, [pc, #16]	; (188 <cpu_irq_leave_critical+0x2c>)
     176:	701a      	strb	r2, [r3, #0]
     178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     17c:	b662      	cpsie	i
	}
}
     17e:	4770      	bx	lr
     180:	20000020 	.word	0x20000020
     184:	20000024 	.word	0x20000024
     188:	20000000 	.word	0x20000000

0000018c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     190:	ac01      	add	r4, sp, #4
     192:	2501      	movs	r5, #1
     194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     196:	2700      	movs	r7, #0
     198:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     19a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	200f      	movs	r0, #15
     1a0:	4e06      	ldr	r6, [pc, #24]	; (1bc <system_board_init+0x30>)
     1a2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a4:	2280      	movs	r2, #128	; 0x80
     1a6:	0212      	lsls	r2, r2, #8
     1a8:	2382      	movs	r3, #130	; 0x82
     1aa:	05db      	lsls	r3, r3, #23
     1ac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1ae:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1b0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1b2:	0021      	movs	r1, r4
     1b4:	201c      	movs	r0, #28
     1b6:	47b0      	blx	r6
}
     1b8:	b003      	add	sp, #12
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1bc:	000001c1 	.word	0x000001c1

000001c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1c0:	b500      	push	{lr}
     1c2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1c4:	ab01      	add	r3, sp, #4
     1c6:	2280      	movs	r2, #128	; 0x80
     1c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1ca:	780a      	ldrb	r2, [r1, #0]
     1cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1ce:	784a      	ldrb	r2, [r1, #1]
     1d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1d2:	788a      	ldrb	r2, [r1, #2]
     1d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1d6:	0019      	movs	r1, r3
     1d8:	4b01      	ldr	r3, [pc, #4]	; (1e0 <port_pin_set_config+0x20>)
     1da:	4798      	blx	r3
}
     1dc:	b003      	add	sp, #12
     1de:	bd00      	pop	{pc}
     1e0:	00000fad 	.word	0x00000fad

000001e4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46de      	mov	lr, fp
     1e8:	4657      	mov	r7, sl
     1ea:	464e      	mov	r6, r9
     1ec:	4645      	mov	r5, r8
     1ee:	b5e0      	push	{r5, r6, r7, lr}
     1f0:	b087      	sub	sp, #28
     1f2:	4680      	mov	r8, r0
     1f4:	9104      	str	r1, [sp, #16]
     1f6:	0016      	movs	r6, r2
     1f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     1fa:	2200      	movs	r2, #0
     1fc:	2300      	movs	r3, #0
     1fe:	2100      	movs	r1, #0
     200:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     202:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     204:	2001      	movs	r0, #1
     206:	0021      	movs	r1, r4
     208:	9600      	str	r6, [sp, #0]
     20a:	9701      	str	r7, [sp, #4]
     20c:	465c      	mov	r4, fp
     20e:	9403      	str	r4, [sp, #12]
     210:	4644      	mov	r4, r8
     212:	9405      	str	r4, [sp, #20]
     214:	e013      	b.n	23e <long_division+0x5a>
     216:	2420      	movs	r4, #32
     218:	1a64      	subs	r4, r4, r1
     21a:	0005      	movs	r5, r0
     21c:	40e5      	lsrs	r5, r4
     21e:	46a8      	mov	r8, r5
     220:	e014      	b.n	24c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     222:	9c00      	ldr	r4, [sp, #0]
     224:	9d01      	ldr	r5, [sp, #4]
     226:	1b12      	subs	r2, r2, r4
     228:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     22a:	465c      	mov	r4, fp
     22c:	464d      	mov	r5, r9
     22e:	432c      	orrs	r4, r5
     230:	46a3      	mov	fp, r4
     232:	9c03      	ldr	r4, [sp, #12]
     234:	4645      	mov	r5, r8
     236:	432c      	orrs	r4, r5
     238:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     23a:	3901      	subs	r1, #1
     23c:	d325      	bcc.n	28a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     23e:	2420      	movs	r4, #32
     240:	4264      	negs	r4, r4
     242:	190c      	adds	r4, r1, r4
     244:	d4e7      	bmi.n	216 <long_division+0x32>
     246:	0005      	movs	r5, r0
     248:	40a5      	lsls	r5, r4
     24a:	46a8      	mov	r8, r5
     24c:	0004      	movs	r4, r0
     24e:	408c      	lsls	r4, r1
     250:	46a1      	mov	r9, r4
		r = r << 1;
     252:	1892      	adds	r2, r2, r2
     254:	415b      	adcs	r3, r3
     256:	0014      	movs	r4, r2
     258:	001d      	movs	r5, r3
		if (n & bit_shift) {
     25a:	9e05      	ldr	r6, [sp, #20]
     25c:	464f      	mov	r7, r9
     25e:	403e      	ands	r6, r7
     260:	46b4      	mov	ip, r6
     262:	9e04      	ldr	r6, [sp, #16]
     264:	4647      	mov	r7, r8
     266:	403e      	ands	r6, r7
     268:	46b2      	mov	sl, r6
     26a:	4666      	mov	r6, ip
     26c:	4657      	mov	r7, sl
     26e:	433e      	orrs	r6, r7
     270:	d003      	beq.n	27a <long_division+0x96>
			r |= 0x01;
     272:	0006      	movs	r6, r0
     274:	4326      	orrs	r6, r4
     276:	0032      	movs	r2, r6
     278:	002b      	movs	r3, r5
		if (r >= d) {
     27a:	9c00      	ldr	r4, [sp, #0]
     27c:	9d01      	ldr	r5, [sp, #4]
     27e:	429d      	cmp	r5, r3
     280:	d8db      	bhi.n	23a <long_division+0x56>
     282:	d1ce      	bne.n	222 <long_division+0x3e>
     284:	4294      	cmp	r4, r2
     286:	d8d8      	bhi.n	23a <long_division+0x56>
     288:	e7cb      	b.n	222 <long_division+0x3e>
     28a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     28c:	4658      	mov	r0, fp
     28e:	0019      	movs	r1, r3
     290:	b007      	add	sp, #28
     292:	bc3c      	pop	{r2, r3, r4, r5}
     294:	4690      	mov	r8, r2
     296:	4699      	mov	r9, r3
     298:	46a2      	mov	sl, r4
     29a:	46ab      	mov	fp, r5
     29c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000029e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     29e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     2a0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2a2:	2340      	movs	r3, #64	; 0x40
     2a4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     2a6:	4281      	cmp	r1, r0
     2a8:	d202      	bcs.n	2b0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     2aa:	0018      	movs	r0, r3
     2ac:	bd10      	pop	{r4, pc}
		baud_calculated++;
     2ae:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     2b0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     2b2:	1c63      	adds	r3, r4, #1
     2b4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     2b6:	4288      	cmp	r0, r1
     2b8:	d9f9      	bls.n	2ae <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2ba:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     2bc:	2cff      	cmp	r4, #255	; 0xff
     2be:	d8f4      	bhi.n	2aa <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     2c0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     2c2:	2300      	movs	r3, #0
     2c4:	e7f1      	b.n	2aa <_sercom_get_sync_baud_val+0xc>
	...

000002c8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ca:	b083      	sub	sp, #12
     2cc:	000f      	movs	r7, r1
     2ce:	0016      	movs	r6, r2
     2d0:	aa08      	add	r2, sp, #32
     2d2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     2d4:	0004      	movs	r4, r0
     2d6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2d8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     2da:	42bc      	cmp	r4, r7
     2dc:	d902      	bls.n	2e4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     2de:	0010      	movs	r0, r2
     2e0:	b003      	add	sp, #12
     2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     2e4:	2b00      	cmp	r3, #0
     2e6:	d114      	bne.n	312 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     2e8:	0002      	movs	r2, r0
     2ea:	0008      	movs	r0, r1
     2ec:	2100      	movs	r1, #0
     2ee:	4c19      	ldr	r4, [pc, #100]	; (354 <_sercom_get_async_baud_val+0x8c>)
     2f0:	47a0      	blx	r4
     2f2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     2f4:	003a      	movs	r2, r7
     2f6:	2300      	movs	r3, #0
     2f8:	2000      	movs	r0, #0
     2fa:	4c17      	ldr	r4, [pc, #92]	; (358 <_sercom_get_async_baud_val+0x90>)
     2fc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     2fe:	2200      	movs	r2, #0
     300:	2301      	movs	r3, #1
     302:	1a12      	subs	r2, r2, r0
     304:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     306:	0c12      	lsrs	r2, r2, #16
     308:	041b      	lsls	r3, r3, #16
     30a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     30c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     30e:	2200      	movs	r2, #0
     310:	e7e5      	b.n	2de <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     312:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     314:	2b01      	cmp	r3, #1
     316:	d1f9      	bne.n	30c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     318:	000a      	movs	r2, r1
     31a:	2300      	movs	r3, #0
     31c:	2100      	movs	r1, #0
     31e:	4c0d      	ldr	r4, [pc, #52]	; (354 <_sercom_get_async_baud_val+0x8c>)
     320:	47a0      	blx	r4
     322:	0002      	movs	r2, r0
     324:	000b      	movs	r3, r1
     326:	9200      	str	r2, [sp, #0]
     328:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     32a:	0038      	movs	r0, r7
     32c:	2100      	movs	r1, #0
     32e:	4c0a      	ldr	r4, [pc, #40]	; (358 <_sercom_get_async_baud_val+0x90>)
     330:	47a0      	blx	r4
     332:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     334:	2380      	movs	r3, #128	; 0x80
     336:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     338:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     33a:	4298      	cmp	r0, r3
     33c:	d8cf      	bhi.n	2de <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     33e:	0f79      	lsrs	r1, r7, #29
     340:	00f8      	lsls	r0, r7, #3
     342:	9a00      	ldr	r2, [sp, #0]
     344:	9b01      	ldr	r3, [sp, #4]
     346:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     348:	00ea      	lsls	r2, r5, #3
     34a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     34c:	b2d2      	uxtb	r2, r2
     34e:	0352      	lsls	r2, r2, #13
     350:	432a      	orrs	r2, r5
     352:	e7db      	b.n	30c <_sercom_get_async_baud_val+0x44>
     354:	00001c09 	.word	0x00001c09
     358:	000001e5 	.word	0x000001e5

0000035c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     35c:	b510      	push	{r4, lr}
     35e:	b082      	sub	sp, #8
     360:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     362:	4b0e      	ldr	r3, [pc, #56]	; (39c <sercom_set_gclk_generator+0x40>)
     364:	781b      	ldrb	r3, [r3, #0]
     366:	2b00      	cmp	r3, #0
     368:	d007      	beq.n	37a <sercom_set_gclk_generator+0x1e>
     36a:	2900      	cmp	r1, #0
     36c:	d105      	bne.n	37a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     36e:	4b0b      	ldr	r3, [pc, #44]	; (39c <sercom_set_gclk_generator+0x40>)
     370:	785b      	ldrb	r3, [r3, #1]
     372:	4283      	cmp	r3, r0
     374:	d010      	beq.n	398 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     376:	201d      	movs	r0, #29
     378:	e00c      	b.n	394 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     37a:	a901      	add	r1, sp, #4
     37c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     37e:	2012      	movs	r0, #18
     380:	4b07      	ldr	r3, [pc, #28]	; (3a0 <sercom_set_gclk_generator+0x44>)
     382:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     384:	2012      	movs	r0, #18
     386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <sercom_set_gclk_generator+0x48>)
     388:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     38a:	4b04      	ldr	r3, [pc, #16]	; (39c <sercom_set_gclk_generator+0x40>)
     38c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     38e:	2201      	movs	r2, #1
     390:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     392:	2000      	movs	r0, #0
}
     394:	b002      	add	sp, #8
     396:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     398:	2000      	movs	r0, #0
     39a:	e7fb      	b.n	394 <sercom_set_gclk_generator+0x38>
     39c:	20000028 	.word	0x20000028
     3a0:	00000eb1 	.word	0x00000eb1
     3a4:	00000e41 	.word	0x00000e41

000003a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     3a8:	4b40      	ldr	r3, [pc, #256]	; (4ac <STACK_SIZE+0xac>)
     3aa:	4298      	cmp	r0, r3
     3ac:	d031      	beq.n	412 <STACK_SIZE+0x12>
     3ae:	d90a      	bls.n	3c6 <_sercom_get_default_pad+0x1e>
     3b0:	4b3f      	ldr	r3, [pc, #252]	; (4b0 <STACK_SIZE+0xb0>)
     3b2:	4298      	cmp	r0, r3
     3b4:	d04d      	beq.n	452 <STACK_SIZE+0x52>
     3b6:	4b3f      	ldr	r3, [pc, #252]	; (4b4 <STACK_SIZE+0xb4>)
     3b8:	4298      	cmp	r0, r3
     3ba:	d05a      	beq.n	472 <STACK_SIZE+0x72>
     3bc:	4b3e      	ldr	r3, [pc, #248]	; (4b8 <STACK_SIZE+0xb8>)
     3be:	4298      	cmp	r0, r3
     3c0:	d037      	beq.n	432 <STACK_SIZE+0x32>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     3c2:	2000      	movs	r0, #0
}
     3c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     3c6:	4b3d      	ldr	r3, [pc, #244]	; (4bc <STACK_SIZE+0xbc>)
     3c8:	4298      	cmp	r0, r3
     3ca:	d00c      	beq.n	3e6 <_sercom_get_default_pad+0x3e>
     3cc:	4b3c      	ldr	r3, [pc, #240]	; (4c0 <STACK_SIZE+0xc0>)
     3ce:	4298      	cmp	r0, r3
     3d0:	d1f7      	bne.n	3c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3d2:	2901      	cmp	r1, #1
     3d4:	d017      	beq.n	406 <STACK_SIZE+0x6>
     3d6:	2900      	cmp	r1, #0
     3d8:	d05d      	beq.n	496 <STACK_SIZE+0x96>
     3da:	2902      	cmp	r1, #2
     3dc:	d015      	beq.n	40a <STACK_SIZE+0xa>
     3de:	2903      	cmp	r1, #3
     3e0:	d015      	beq.n	40e <STACK_SIZE+0xe>
	return 0;
     3e2:	2000      	movs	r0, #0
     3e4:	e7ee      	b.n	3c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3e6:	2901      	cmp	r1, #1
     3e8:	d007      	beq.n	3fa <_sercom_get_default_pad+0x52>
     3ea:	2900      	cmp	r1, #0
     3ec:	d051      	beq.n	492 <STACK_SIZE+0x92>
     3ee:	2902      	cmp	r1, #2
     3f0:	d005      	beq.n	3fe <_sercom_get_default_pad+0x56>
     3f2:	2903      	cmp	r1, #3
     3f4:	d005      	beq.n	402 <STACK_SIZE+0x2>
	return 0;
     3f6:	2000      	movs	r0, #0
     3f8:	e7e4      	b.n	3c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3fa:	4832      	ldr	r0, [pc, #200]	; (4c4 <STACK_SIZE+0xc4>)
     3fc:	e7e2      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     3fe:	4832      	ldr	r0, [pc, #200]	; (4c8 <STACK_SIZE+0xc8>)
     400:	e7e0      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     402:	4832      	ldr	r0, [pc, #200]	; (4cc <STACK_SIZE+0xcc>)
     404:	e7de      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     406:	4832      	ldr	r0, [pc, #200]	; (4d0 <STACK_SIZE+0xd0>)
     408:	e7dc      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     40a:	4832      	ldr	r0, [pc, #200]	; (4d4 <STACK_SIZE+0xd4>)
     40c:	e7da      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     40e:	4832      	ldr	r0, [pc, #200]	; (4d8 <STACK_SIZE+0xd8>)
     410:	e7d8      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     412:	2901      	cmp	r1, #1
     414:	d007      	beq.n	426 <STACK_SIZE+0x26>
     416:	2900      	cmp	r1, #0
     418:	d03f      	beq.n	49a <STACK_SIZE+0x9a>
     41a:	2902      	cmp	r1, #2
     41c:	d005      	beq.n	42a <STACK_SIZE+0x2a>
     41e:	2903      	cmp	r1, #3
     420:	d005      	beq.n	42e <STACK_SIZE+0x2e>
	return 0;
     422:	2000      	movs	r0, #0
     424:	e7ce      	b.n	3c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     426:	482d      	ldr	r0, [pc, #180]	; (4dc <STACK_SIZE+0xdc>)
     428:	e7cc      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     42a:	482d      	ldr	r0, [pc, #180]	; (4e0 <STACK_SIZE+0xe0>)
     42c:	e7ca      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     42e:	482d      	ldr	r0, [pc, #180]	; (4e4 <STACK_SIZE+0xe4>)
     430:	e7c8      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     432:	2901      	cmp	r1, #1
     434:	d007      	beq.n	446 <STACK_SIZE+0x46>
     436:	2900      	cmp	r1, #0
     438:	d031      	beq.n	49e <STACK_SIZE+0x9e>
     43a:	2902      	cmp	r1, #2
     43c:	d005      	beq.n	44a <STACK_SIZE+0x4a>
     43e:	2903      	cmp	r1, #3
     440:	d005      	beq.n	44e <STACK_SIZE+0x4e>
	return 0;
     442:	2000      	movs	r0, #0
     444:	e7be      	b.n	3c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     446:	4828      	ldr	r0, [pc, #160]	; (4e8 <STACK_SIZE+0xe8>)
     448:	e7bc      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     44a:	4828      	ldr	r0, [pc, #160]	; (4ec <STACK_SIZE+0xec>)
     44c:	e7ba      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     44e:	4828      	ldr	r0, [pc, #160]	; (4f0 <STACK_SIZE+0xf0>)
     450:	e7b8      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     452:	2901      	cmp	r1, #1
     454:	d007      	beq.n	466 <STACK_SIZE+0x66>
     456:	2900      	cmp	r1, #0
     458:	d023      	beq.n	4a2 <STACK_SIZE+0xa2>
     45a:	2902      	cmp	r1, #2
     45c:	d005      	beq.n	46a <STACK_SIZE+0x6a>
     45e:	2903      	cmp	r1, #3
     460:	d005      	beq.n	46e <STACK_SIZE+0x6e>
	return 0;
     462:	2000      	movs	r0, #0
     464:	e7ae      	b.n	3c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     466:	4823      	ldr	r0, [pc, #140]	; (4f4 <STACK_SIZE+0xf4>)
     468:	e7ac      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     46a:	4823      	ldr	r0, [pc, #140]	; (4f8 <STACK_SIZE+0xf8>)
     46c:	e7aa      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     46e:	4823      	ldr	r0, [pc, #140]	; (4fc <STACK_SIZE+0xfc>)
     470:	e7a8      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     472:	2901      	cmp	r1, #1
     474:	d007      	beq.n	486 <STACK_SIZE+0x86>
     476:	2900      	cmp	r1, #0
     478:	d015      	beq.n	4a6 <STACK_SIZE+0xa6>
     47a:	2902      	cmp	r1, #2
     47c:	d005      	beq.n	48a <STACK_SIZE+0x8a>
     47e:	2903      	cmp	r1, #3
     480:	d005      	beq.n	48e <STACK_SIZE+0x8e>
	return 0;
     482:	2000      	movs	r0, #0
     484:	e79e      	b.n	3c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     486:	481e      	ldr	r0, [pc, #120]	; (500 <STACK_SIZE+0x100>)
     488:	e79c      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     48a:	481e      	ldr	r0, [pc, #120]	; (504 <STACK_SIZE+0x104>)
     48c:	e79a      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     48e:	481e      	ldr	r0, [pc, #120]	; (508 <STACK_SIZE+0x108>)
     490:	e798      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     492:	481e      	ldr	r0, [pc, #120]	; (50c <STACK_SIZE+0x10c>)
     494:	e796      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     496:	481e      	ldr	r0, [pc, #120]	; (510 <STACK_SIZE+0x110>)
     498:	e794      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     49a:	481e      	ldr	r0, [pc, #120]	; (514 <STACK_SIZE+0x114>)
     49c:	e792      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     49e:	481e      	ldr	r0, [pc, #120]	; (518 <STACK_SIZE+0x118>)
     4a0:	e790      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     4a2:	481e      	ldr	r0, [pc, #120]	; (51c <STACK_SIZE+0x11c>)
     4a4:	e78e      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     4a6:	481e      	ldr	r0, [pc, #120]	; (520 <STACK_SIZE+0x120>)
     4a8:	e78c      	b.n	3c4 <_sercom_get_default_pad+0x1c>
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	42000c00 	.word	0x42000c00
     4b0:	42001400 	.word	0x42001400
     4b4:	42001800 	.word	0x42001800
     4b8:	42001000 	.word	0x42001000
     4bc:	42000400 	.word	0x42000400
     4c0:	42000800 	.word	0x42000800
     4c4:	00050003 	.word	0x00050003
     4c8:	00060003 	.word	0x00060003
     4cc:	00070003 	.word	0x00070003
     4d0:	00110002 	.word	0x00110002
     4d4:	00120002 	.word	0x00120002
     4d8:	00130002 	.word	0x00130002
     4dc:	000d0002 	.word	0x000d0002
     4e0:	000e0002 	.word	0x000e0002
     4e4:	000f0002 	.word	0x000f0002
     4e8:	00170002 	.word	0x00170002
     4ec:	00180002 	.word	0x00180002
     4f0:	00190002 	.word	0x00190002
     4f4:	00290003 	.word	0x00290003
     4f8:	002a0003 	.word	0x002a0003
     4fc:	002b0003 	.word	0x002b0003
     500:	00230003 	.word	0x00230003
     504:	00200003 	.word	0x00200003
     508:	00210003 	.word	0x00210003
     50c:	00040003 	.word	0x00040003
     510:	00100002 	.word	0x00100002
     514:	000c0002 	.word	0x000c0002
     518:	00160002 	.word	0x00160002
     51c:	00280003 	.word	0x00280003
     520:	00220003 	.word	0x00220003

00000524 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     524:	b530      	push	{r4, r5, lr}
     526:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     528:	4b0b      	ldr	r3, [pc, #44]	; (558 <_sercom_get_sercom_inst_index+0x34>)
     52a:	466a      	mov	r2, sp
     52c:	cb32      	ldmia	r3!, {r1, r4, r5}
     52e:	c232      	stmia	r2!, {r1, r4, r5}
     530:	cb32      	ldmia	r3!, {r1, r4, r5}
     532:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     534:	9b00      	ldr	r3, [sp, #0]
     536:	4283      	cmp	r3, r0
     538:	d00b      	beq.n	552 <_sercom_get_sercom_inst_index+0x2e>
     53a:	2301      	movs	r3, #1
     53c:	009a      	lsls	r2, r3, #2
     53e:	4669      	mov	r1, sp
     540:	5852      	ldr	r2, [r2, r1]
     542:	4282      	cmp	r2, r0
     544:	d006      	beq.n	554 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     546:	3301      	adds	r3, #1
     548:	2b06      	cmp	r3, #6
     54a:	d1f7      	bne.n	53c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     54c:	2000      	movs	r0, #0
}
     54e:	b007      	add	sp, #28
     550:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     552:	2300      	movs	r3, #0
			return i;
     554:	b2d8      	uxtb	r0, r3
     556:	e7fa      	b.n	54e <_sercom_get_sercom_inst_index+0x2a>
     558:	00001ca4 	.word	0x00001ca4

0000055c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     55c:	4770      	bx	lr
	...

00000560 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     560:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     562:	4b0a      	ldr	r3, [pc, #40]	; (58c <_sercom_set_handler+0x2c>)
     564:	781b      	ldrb	r3, [r3, #0]
     566:	2b00      	cmp	r3, #0
     568:	d10c      	bne.n	584 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     56a:	4f09      	ldr	r7, [pc, #36]	; (590 <_sercom_set_handler+0x30>)
     56c:	4e09      	ldr	r6, [pc, #36]	; (594 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     56e:	4d0a      	ldr	r5, [pc, #40]	; (598 <_sercom_set_handler+0x38>)
     570:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     572:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     574:	195a      	adds	r2, r3, r5
     576:	6014      	str	r4, [r2, #0]
     578:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     57a:	2b18      	cmp	r3, #24
     57c:	d1f9      	bne.n	572 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     57e:	2201      	movs	r2, #1
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <_sercom_set_handler+0x2c>)
     582:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     584:	0080      	lsls	r0, r0, #2
     586:	4b02      	ldr	r3, [pc, #8]	; (590 <_sercom_set_handler+0x30>)
     588:	50c1      	str	r1, [r0, r3]
}
     58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     58c:	2000002a 	.word	0x2000002a
     590:	2000002c 	.word	0x2000002c
     594:	0000055d 	.word	0x0000055d
     598:	20000054 	.word	0x20000054

0000059c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     59c:	b500      	push	{lr}
     59e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     5a0:	2309      	movs	r3, #9
     5a2:	466a      	mov	r2, sp
     5a4:	7013      	strb	r3, [r2, #0]
     5a6:	3301      	adds	r3, #1
     5a8:	7053      	strb	r3, [r2, #1]
     5aa:	3301      	adds	r3, #1
     5ac:	7093      	strb	r3, [r2, #2]
     5ae:	3301      	adds	r3, #1
     5b0:	70d3      	strb	r3, [r2, #3]
     5b2:	3301      	adds	r3, #1
     5b4:	7113      	strb	r3, [r2, #4]
     5b6:	3301      	adds	r3, #1
     5b8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     5ba:	4b03      	ldr	r3, [pc, #12]	; (5c8 <_sercom_get_interrupt_vector+0x2c>)
     5bc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     5be:	466b      	mov	r3, sp
     5c0:	5618      	ldrsb	r0, [r3, r0]
}
     5c2:	b003      	add	sp, #12
     5c4:	bd00      	pop	{pc}
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	00000525 	.word	0x00000525

000005cc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     5cc:	b510      	push	{r4, lr}
     5ce:	4b02      	ldr	r3, [pc, #8]	; (5d8 <SERCOM0_Handler+0xc>)
     5d0:	681b      	ldr	r3, [r3, #0]
     5d2:	2000      	movs	r0, #0
     5d4:	4798      	blx	r3
     5d6:	bd10      	pop	{r4, pc}
     5d8:	2000002c 	.word	0x2000002c

000005dc <SERCOM1_Handler>:
     5dc:	b510      	push	{r4, lr}
     5de:	4b02      	ldr	r3, [pc, #8]	; (5e8 <SERCOM1_Handler+0xc>)
     5e0:	685b      	ldr	r3, [r3, #4]
     5e2:	2001      	movs	r0, #1
     5e4:	4798      	blx	r3
     5e6:	bd10      	pop	{r4, pc}
     5e8:	2000002c 	.word	0x2000002c

000005ec <SERCOM2_Handler>:
     5ec:	b510      	push	{r4, lr}
     5ee:	4b02      	ldr	r3, [pc, #8]	; (5f8 <SERCOM2_Handler+0xc>)
     5f0:	689b      	ldr	r3, [r3, #8]
     5f2:	2002      	movs	r0, #2
     5f4:	4798      	blx	r3
     5f6:	bd10      	pop	{r4, pc}
     5f8:	2000002c 	.word	0x2000002c

000005fc <SERCOM3_Handler>:
     5fc:	b510      	push	{r4, lr}
     5fe:	4b02      	ldr	r3, [pc, #8]	; (608 <SERCOM3_Handler+0xc>)
     600:	68db      	ldr	r3, [r3, #12]
     602:	2003      	movs	r0, #3
     604:	4798      	blx	r3
     606:	bd10      	pop	{r4, pc}
     608:	2000002c 	.word	0x2000002c

0000060c <SERCOM4_Handler>:
     60c:	b510      	push	{r4, lr}
     60e:	4b02      	ldr	r3, [pc, #8]	; (618 <SERCOM4_Handler+0xc>)
     610:	691b      	ldr	r3, [r3, #16]
     612:	2004      	movs	r0, #4
     614:	4798      	blx	r3
     616:	bd10      	pop	{r4, pc}
     618:	2000002c 	.word	0x2000002c

0000061c <SERCOM5_Handler>:
     61c:	b510      	push	{r4, lr}
     61e:	4b02      	ldr	r3, [pc, #8]	; (628 <SERCOM5_Handler+0xc>)
     620:	695b      	ldr	r3, [r3, #20]
     622:	2005      	movs	r0, #5
     624:	4798      	blx	r3
     626:	bd10      	pop	{r4, pc}
     628:	2000002c 	.word	0x2000002c

0000062c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     62c:	b5f0      	push	{r4, r5, r6, r7, lr}
     62e:	46de      	mov	lr, fp
     630:	4657      	mov	r7, sl
     632:	464e      	mov	r6, r9
     634:	4645      	mov	r5, r8
     636:	b5e0      	push	{r5, r6, r7, lr}
     638:	b091      	sub	sp, #68	; 0x44
     63a:	0005      	movs	r5, r0
     63c:	000c      	movs	r4, r1
     63e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     640:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     642:	0008      	movs	r0, r1
     644:	4bd2      	ldr	r3, [pc, #840]	; (990 <usart_init+0x364>)
     646:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
     648:	2805      	cmp	r0, #5
     64a:	d00d      	beq.n	668 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
     64c:	0007      	movs	r7, r0
     64e:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     650:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     652:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     654:	07d2      	lsls	r2, r2, #31
     656:	d509      	bpl.n	66c <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     658:	0018      	movs	r0, r3
     65a:	b011      	add	sp, #68	; 0x44
     65c:	bc3c      	pop	{r2, r3, r4, r5}
     65e:	4690      	mov	r8, r2
     660:	4699      	mov	r9, r3
     662:	46a2      	mov	sl, r4
     664:	46ab      	mov	fp, r5
     666:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
     668:	2719      	movs	r7, #25
     66a:	e7f1      	b.n	650 <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     66c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     66e:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     670:	0792      	lsls	r2, r2, #30
     672:	d4f1      	bmi.n	658 <usart_init+0x2c>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     674:	4ac7      	ldr	r2, [pc, #796]	; (994 <usart_init+0x368>)
     676:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     678:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     67a:	3b1b      	subs	r3, #27
     67c:	4083      	lsls	r3, r0
     67e:	430b      	orrs	r3, r1
     680:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     682:	a90f      	add	r1, sp, #60	; 0x3c
     684:	2335      	movs	r3, #53	; 0x35
     686:	4698      	mov	r8, r3
     688:	5cf3      	ldrb	r3, [r6, r3]
     68a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     68c:	b2ff      	uxtb	r7, r7
     68e:	0038      	movs	r0, r7
     690:	4bc1      	ldr	r3, [pc, #772]	; (998 <usart_init+0x36c>)
     692:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     694:	0038      	movs	r0, r7
     696:	4bc1      	ldr	r3, [pc, #772]	; (99c <usart_init+0x370>)
     698:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     69a:	4643      	mov	r3, r8
     69c:	5cf0      	ldrb	r0, [r6, r3]
     69e:	2100      	movs	r1, #0
     6a0:	4bbf      	ldr	r3, [pc, #764]	; (9a0 <usart_init+0x374>)
     6a2:	4798      	blx	r3
	module->character_size = config->character_size;
     6a4:	7af3      	ldrb	r3, [r6, #11]
     6a6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     6a8:	232c      	movs	r3, #44	; 0x2c
     6aa:	5cf3      	ldrb	r3, [r6, r3]
     6ac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     6ae:	232d      	movs	r3, #45	; 0x2d
     6b0:	5cf3      	ldrb	r3, [r6, r3]
     6b2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     6b4:	7ef3      	ldrb	r3, [r6, #27]
     6b6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     6b8:	2324      	movs	r3, #36	; 0x24
     6ba:	5cf3      	ldrb	r3, [r6, r3]
     6bc:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6be:	682b      	ldr	r3, [r5, #0]
     6c0:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6c2:	0018      	movs	r0, r3
     6c4:	4bb2      	ldr	r3, [pc, #712]	; (990 <usart_init+0x364>)
     6c6:	4798      	blx	r3
	if (sercom_index == 5) {
     6c8:	2805      	cmp	r0, #5
     6ca:	d01d      	beq.n	708 <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6cc:	3013      	adds	r0, #19
	uint16_t baud  = 0;
     6ce:	2200      	movs	r2, #0
     6d0:	230e      	movs	r3, #14
     6d2:	a906      	add	r1, sp, #24
     6d4:	468c      	mov	ip, r1
     6d6:	4463      	add	r3, ip
     6d8:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     6da:	8a33      	ldrh	r3, [r6, #16]
     6dc:	4698      	mov	r8, r3
     6de:	2380      	movs	r3, #128	; 0x80
     6e0:	01db      	lsls	r3, r3, #7
     6e2:	4598      	cmp	r8, r3
     6e4:	d100      	bne.n	6e8 <usart_init+0xbc>
     6e6:	e0c3      	b.n	870 <usart_init+0x244>
     6e8:	d910      	bls.n	70c <usart_init+0xe0>
     6ea:	23c0      	movs	r3, #192	; 0xc0
     6ec:	01db      	lsls	r3, r3, #7
     6ee:	4598      	cmp	r8, r3
     6f0:	d100      	bne.n	6f4 <usart_init+0xc8>
     6f2:	e0b8      	b.n	866 <usart_init+0x23a>
     6f4:	2380      	movs	r3, #128	; 0x80
     6f6:	021b      	lsls	r3, r3, #8
     6f8:	4598      	cmp	r8, r3
     6fa:	d000      	beq.n	6fe <usart_init+0xd2>
     6fc:	e166      	b.n	9cc <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     6fe:	2303      	movs	r3, #3
     700:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     702:	2300      	movs	r3, #0
     704:	9307      	str	r3, [sp, #28]
     706:	e00a      	b.n	71e <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     708:	2019      	movs	r0, #25
     70a:	e7e0      	b.n	6ce <usart_init+0xa2>
	switch (config->sample_rate) {
     70c:	2380      	movs	r3, #128	; 0x80
     70e:	019b      	lsls	r3, r3, #6
     710:	4598      	cmp	r8, r3
     712:	d000      	beq.n	716 <usart_init+0xea>
     714:	e15a      	b.n	9cc <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     716:	2310      	movs	r3, #16
     718:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     71a:	3b0f      	subs	r3, #15
     71c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     71e:	6833      	ldr	r3, [r6, #0]
     720:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     722:	68f3      	ldr	r3, [r6, #12]
     724:	469b      	mov	fp, r3
		config->sample_adjustment |
     726:	6973      	ldr	r3, [r6, #20]
     728:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     72a:	7e33      	ldrb	r3, [r6, #24]
     72c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     72e:	232e      	movs	r3, #46	; 0x2e
     730:	5cf3      	ldrb	r3, [r6, r3]
     732:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     734:	6873      	ldr	r3, [r6, #4]
     736:	4699      	mov	r9, r3
	switch (transfer_mode)
     738:	2b00      	cmp	r3, #0
     73a:	d100      	bne.n	73e <usart_init+0x112>
     73c:	e0c5      	b.n	8ca <usart_init+0x29e>
     73e:	2380      	movs	r3, #128	; 0x80
     740:	055b      	lsls	r3, r3, #21
     742:	4599      	cmp	r9, r3
     744:	d100      	bne.n	748 <usart_init+0x11c>
     746:	e0a8      	b.n	89a <usart_init+0x26e>
	if(config->encoding_format_enable) {
     748:	7e73      	ldrb	r3, [r6, #25]
     74a:	2b00      	cmp	r3, #0
     74c:	d002      	beq.n	754 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     74e:	7eb3      	ldrb	r3, [r6, #26]
     750:	9a02      	ldr	r2, [sp, #8]
     752:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     754:	230e      	movs	r3, #14
     756:	aa06      	add	r2, sp, #24
     758:	4694      	mov	ip, r2
     75a:	4463      	add	r3, ip
     75c:	881b      	ldrh	r3, [r3, #0]
     75e:	9a02      	ldr	r2, [sp, #8]
     760:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     762:	9a05      	ldr	r2, [sp, #20]
     764:	465b      	mov	r3, fp
     766:	431a      	orrs	r2, r3
     768:	9b03      	ldr	r3, [sp, #12]
     76a:	431a      	orrs	r2, r3
     76c:	464b      	mov	r3, r9
     76e:	431a      	orrs	r2, r3
     770:	4643      	mov	r3, r8
     772:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     774:	9b04      	ldr	r3, [sp, #16]
     776:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     778:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     77a:	4653      	mov	r3, sl
     77c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     77e:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
     780:	232f      	movs	r3, #47	; 0x2f
     782:	5cf3      	ldrb	r3, [r6, r3]
     784:	2b00      	cmp	r3, #0
     786:	d101      	bne.n	78c <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     788:	3304      	adds	r3, #4
     78a:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     78c:	7e73      	ldrb	r3, [r6, #25]
     78e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     790:	2124      	movs	r1, #36	; 0x24
     792:	5c71      	ldrb	r1, [r6, r1]
     794:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     796:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     798:	2126      	movs	r1, #38	; 0x26
     79a:	5c71      	ldrb	r1, [r6, r1]
     79c:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     79e:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7a0:	212c      	movs	r1, #44	; 0x2c
     7a2:	5c71      	ldrb	r1, [r6, r1]
     7a4:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7a6:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     7a8:	212d      	movs	r1, #45	; 0x2d
     7aa:	5c71      	ldrb	r1, [r6, r1]
     7ac:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7ae:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     7b0:	7ab0      	ldrb	r0, [r6, #10]
     7b2:	7af1      	ldrb	r1, [r6, #11]
     7b4:	4308      	orrs	r0, r1
     7b6:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
     7b8:	8933      	ldrh	r3, [r6, #8]
     7ba:	2bff      	cmp	r3, #255	; 0xff
     7bc:	d100      	bne.n	7c0 <usart_init+0x194>
     7be:	e0aa      	b.n	916 <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     7c0:	2180      	movs	r1, #128	; 0x80
     7c2:	0449      	lsls	r1, r1, #17
     7c4:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
     7c6:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     7c8:	9902      	ldr	r1, [sp, #8]
     7ca:	688b      	ldr	r3, [r1, #8]
     7cc:	469c      	mov	ip, r3
						| config->lin_break_length;
     7ce:	8c33      	ldrh	r3, [r6, #32]
     7d0:	8c71      	ldrh	r1, [r6, #34]	; 0x22
     7d2:	430b      	orrs	r3, r1
     7d4:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     7d6:	2107      	movs	r1, #7
     7d8:	4663      	mov	r3, ip
     7da:	4019      	ands	r1, r3
						| config->lin_break_length;
     7dc:	003b      	movs	r3, r7
     7de:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     7e0:	9902      	ldr	r1, [sp, #8]
     7e2:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
     7e4:	69f3      	ldr	r3, [r6, #28]
     7e6:	2b00      	cmp	r3, #0
     7e8:	d002      	beq.n	7f0 <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     7ea:	496e      	ldr	r1, [pc, #440]	; (9a4 <usart_init+0x378>)
     7ec:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
     7ee:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     7f0:	2334      	movs	r3, #52	; 0x34
     7f2:	5cf3      	ldrb	r3, [r6, r3]
     7f4:	2b00      	cmp	r3, #0
     7f6:	d103      	bne.n	800 <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7f8:	4b6b      	ldr	r3, [pc, #428]	; (9a8 <usart_init+0x37c>)
     7fa:	789b      	ldrb	r3, [r3, #2]
     7fc:	079b      	lsls	r3, r3, #30
     7fe:	d501      	bpl.n	804 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     800:	2380      	movs	r3, #128	; 0x80
     802:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     804:	6829      	ldr	r1, [r5, #0]
     806:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     808:	69cb      	ldr	r3, [r1, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     80a:	2b00      	cmp	r3, #0
     80c:	d1fc      	bne.n	808 <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
     80e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     810:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     812:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     814:	2b00      	cmp	r3, #0
     816:	d1fc      	bne.n	812 <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
     818:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     81a:	683b      	ldr	r3, [r7, #0]
     81c:	22f0      	movs	r2, #240	; 0xf0
     81e:	0512      	lsls	r2, r2, #20
     820:	4013      	ands	r3, r2
     822:	22e0      	movs	r2, #224	; 0xe0
     824:	04d2      	lsls	r2, r2, #19
     826:	4293      	cmp	r3, r2
     828:	d00a      	beq.n	840 <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     82a:	68bb      	ldr	r3, [r7, #8]
     82c:	2207      	movs	r2, #7
     82e:	4393      	bics	r3, r2
     830:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     832:	68ba      	ldr	r2, [r7, #8]
     834:	2325      	movs	r3, #37	; 0x25
     836:	5cf1      	ldrb	r1, [r6, r3]
     838:	3b1e      	subs	r3, #30
     83a:	400b      	ands	r3, r1
     83c:	4313      	orrs	r3, r2
     83e:	60bb      	str	r3, [r7, #8]
     840:	ab0e      	add	r3, sp, #56	; 0x38
     842:	2280      	movs	r2, #128	; 0x80
     844:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     846:	2200      	movs	r2, #0
     848:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     84a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     84c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     84e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     850:	930a      	str	r3, [sp, #40]	; 0x28
     852:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     854:	930b      	str	r3, [sp, #44]	; 0x2c
     856:	6c33      	ldr	r3, [r6, #64]	; 0x40
     858:	930c      	str	r3, [sp, #48]	; 0x30
     85a:	6c73      	ldr	r3, [r6, #68]	; 0x44
     85c:	9302      	str	r3, [sp, #8]
     85e:	930d      	str	r3, [sp, #52]	; 0x34
     860:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     862:	ae0a      	add	r6, sp, #40	; 0x28
     864:	e066      	b.n	934 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     866:	2308      	movs	r3, #8
     868:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     86a:	3b07      	subs	r3, #7
     86c:	9307      	str	r3, [sp, #28]
     86e:	e756      	b.n	71e <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
     870:	6833      	ldr	r3, [r6, #0]
     872:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     874:	68f3      	ldr	r3, [r6, #12]
     876:	469b      	mov	fp, r3
		config->sample_adjustment |
     878:	6973      	ldr	r3, [r6, #20]
     87a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     87c:	7e33      	ldrb	r3, [r6, #24]
     87e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     880:	232e      	movs	r3, #46	; 0x2e
     882:	5cf3      	ldrb	r3, [r6, r3]
     884:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     886:	6873      	ldr	r3, [r6, #4]
     888:	4699      	mov	r9, r3
	switch (transfer_mode)
     88a:	2b00      	cmp	r3, #0
     88c:	d019      	beq.n	8c2 <usart_init+0x296>
     88e:	2380      	movs	r3, #128	; 0x80
     890:	055b      	lsls	r3, r3, #21
     892:	4599      	cmp	r9, r3
     894:	d001      	beq.n	89a <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
     896:	2300      	movs	r3, #0
     898:	e027      	b.n	8ea <usart_init+0x2be>
			if (!config->use_external_clock) {
     89a:	232f      	movs	r3, #47	; 0x2f
     89c:	5cf3      	ldrb	r3, [r6, r3]
     89e:	2b00      	cmp	r3, #0
     8a0:	d000      	beq.n	8a4 <usart_init+0x278>
     8a2:	e751      	b.n	748 <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8a4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     8a6:	001f      	movs	r7, r3
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	4b40      	ldr	r3, [pc, #256]	; (9ac <usart_init+0x380>)
     8ac:	4798      	blx	r3
     8ae:	0001      	movs	r1, r0
     8b0:	220e      	movs	r2, #14
     8b2:	ab06      	add	r3, sp, #24
     8b4:	469c      	mov	ip, r3
     8b6:	4462      	add	r2, ip
     8b8:	0038      	movs	r0, r7
     8ba:	4b3d      	ldr	r3, [pc, #244]	; (9b0 <usart_init+0x384>)
     8bc:	4798      	blx	r3
     8be:	0003      	movs	r3, r0
     8c0:	e013      	b.n	8ea <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8c2:	2308      	movs	r3, #8
     8c4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8c6:	2300      	movs	r3, #0
     8c8:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     8ca:	232f      	movs	r3, #47	; 0x2f
     8cc:	5cf3      	ldrb	r3, [r6, r3]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d00f      	beq.n	8f2 <usart_init+0x2c6>
				status_code =
     8d2:	9b06      	ldr	r3, [sp, #24]
     8d4:	9300      	str	r3, [sp, #0]
     8d6:	9b07      	ldr	r3, [sp, #28]
     8d8:	220e      	movs	r2, #14
     8da:	a906      	add	r1, sp, #24
     8dc:	468c      	mov	ip, r1
     8de:	4462      	add	r2, ip
     8e0:	6b31      	ldr	r1, [r6, #48]	; 0x30
     8e2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     8e4:	4f33      	ldr	r7, [pc, #204]	; (9b4 <usart_init+0x388>)
     8e6:	47b8      	blx	r7
     8e8:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
     8ea:	2b00      	cmp	r3, #0
     8ec:	d000      	beq.n	8f0 <usart_init+0x2c4>
     8ee:	e6b3      	b.n	658 <usart_init+0x2c>
     8f0:	e72a      	b.n	748 <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
     8f2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     8f4:	001f      	movs	r7, r3
     8f6:	b2c0      	uxtb	r0, r0
     8f8:	4b2c      	ldr	r3, [pc, #176]	; (9ac <usart_init+0x380>)
     8fa:	4798      	blx	r3
     8fc:	0001      	movs	r1, r0
				status_code =
     8fe:	9b06      	ldr	r3, [sp, #24]
     900:	9300      	str	r3, [sp, #0]
     902:	9b07      	ldr	r3, [sp, #28]
     904:	220e      	movs	r2, #14
     906:	a806      	add	r0, sp, #24
     908:	4684      	mov	ip, r0
     90a:	4462      	add	r2, ip
     90c:	0038      	movs	r0, r7
     90e:	4f29      	ldr	r7, [pc, #164]	; (9b4 <usart_init+0x388>)
     910:	47b8      	blx	r7
     912:	0003      	movs	r3, r0
     914:	e7e9      	b.n	8ea <usart_init+0x2be>
		if(config->lin_slave_enable) {
     916:	7ef3      	ldrb	r3, [r6, #27]
     918:	2b00      	cmp	r3, #0
     91a:	d100      	bne.n	91e <usart_init+0x2f2>
     91c:	e754      	b.n	7c8 <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     91e:	2380      	movs	r3, #128	; 0x80
     920:	04db      	lsls	r3, r3, #19
     922:	431a      	orrs	r2, r3
     924:	e750      	b.n	7c8 <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     926:	0020      	movs	r0, r4
     928:	4b23      	ldr	r3, [pc, #140]	; (9b8 <usart_init+0x38c>)
     92a:	4798      	blx	r3
     92c:	e007      	b.n	93e <usart_init+0x312>
     92e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     930:	2f04      	cmp	r7, #4
     932:	d00d      	beq.n	950 <usart_init+0x324>
     934:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     936:	00bb      	lsls	r3, r7, #2
     938:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     93a:	2800      	cmp	r0, #0
     93c:	d0f3      	beq.n	926 <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
     93e:	1c43      	adds	r3, r0, #1
     940:	d0f5      	beq.n	92e <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     942:	a90e      	add	r1, sp, #56	; 0x38
     944:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     946:	0c00      	lsrs	r0, r0, #16
     948:	b2c0      	uxtb	r0, r0
     94a:	4b1c      	ldr	r3, [pc, #112]	; (9bc <usart_init+0x390>)
     94c:	4798      	blx	r3
     94e:	e7ee      	b.n	92e <usart_init+0x302>
		module->callback[i]            = NULL;
     950:	2300      	movs	r3, #0
     952:	60eb      	str	r3, [r5, #12]
     954:	612b      	str	r3, [r5, #16]
     956:	616b      	str	r3, [r5, #20]
     958:	61ab      	str	r3, [r5, #24]
     95a:	61eb      	str	r3, [r5, #28]
     95c:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     95e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     960:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     962:	2200      	movs	r2, #0
     964:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     966:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     968:	3330      	adds	r3, #48	; 0x30
     96a:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     96c:	3301      	adds	r3, #1
     96e:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     970:	3301      	adds	r3, #1
     972:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     974:	3301      	adds	r3, #1
     976:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     978:	6828      	ldr	r0, [r5, #0]
     97a:	4b05      	ldr	r3, [pc, #20]	; (990 <usart_init+0x364>)
     97c:	4798      	blx	r3
     97e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     980:	490f      	ldr	r1, [pc, #60]	; (9c0 <usart_init+0x394>)
     982:	4b10      	ldr	r3, [pc, #64]	; (9c4 <usart_init+0x398>)
     984:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     986:	00a4      	lsls	r4, r4, #2
     988:	4b0f      	ldr	r3, [pc, #60]	; (9c8 <usart_init+0x39c>)
     98a:	50e5      	str	r5, [r4, r3]
	return status_code;
     98c:	2300      	movs	r3, #0
     98e:	e663      	b.n	658 <usart_init+0x2c>
     990:	00000525 	.word	0x00000525
     994:	40000800 	.word	0x40000800
     998:	00000eb1 	.word	0x00000eb1
     99c:	00000e41 	.word	0x00000e41
     9a0:	0000035d 	.word	0x0000035d
     9a4:	f0ffffff 	.word	0xf0ffffff
     9a8:	41002000 	.word	0x41002000
     9ac:	00000ed5 	.word	0x00000ed5
     9b0:	0000029f 	.word	0x0000029f
     9b4:	000002c9 	.word	0x000002c9
     9b8:	000003a9 	.word	0x000003a9
     9bc:	00000fad 	.word	0x00000fad
     9c0:	00000a69 	.word	0x00000a69
     9c4:	00000561 	.word	0x00000561
     9c8:	20000054 	.word	0x20000054
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     9cc:	2310      	movs	r3, #16
     9ce:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9d0:	2300      	movs	r3, #0
     9d2:	9307      	str	r3, [sp, #28]
     9d4:	e6a3      	b.n	71e <usart_init+0xf2>
     9d6:	46c0      	nop			; (mov r8, r8)

000009d8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     9d8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     9da:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     9dc:	2a00      	cmp	r2, #0
     9de:	d101      	bne.n	9e4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     9e0:	0018      	movs	r0, r3
     9e2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     9e4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     9e6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     9e8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     9ea:	2a00      	cmp	r2, #0
     9ec:	d1f8      	bne.n	9e0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9ee:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     9f0:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     9f2:	2102      	movs	r1, #2
     9f4:	7e13      	ldrb	r3, [r2, #24]
     9f6:	420b      	tst	r3, r1
     9f8:	d0fc      	beq.n	9f4 <usart_write_wait+0x1c>
	return STATUS_OK;
     9fa:	2300      	movs	r3, #0
     9fc:	e7f0      	b.n	9e0 <usart_write_wait+0x8>

000009fe <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     9fe:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     a00:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     a02:	2a00      	cmp	r2, #0
     a04:	d101      	bne.n	a0a <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     a06:	0018      	movs	r0, r3
     a08:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     a0a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     a0c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     a0e:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     a10:	2a00      	cmp	r2, #0
     a12:	d1f8      	bne.n	a06 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a14:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a16:	7e10      	ldrb	r0, [r2, #24]
     a18:	0740      	lsls	r0, r0, #29
     a1a:	d5f4      	bpl.n	a06 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a1c:	8b53      	ldrh	r3, [r2, #26]
     a1e:	b2db      	uxtb	r3, r3
	if (error_code) {
     a20:	0658      	lsls	r0, r3, #25
     a22:	d01d      	beq.n	a60 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a24:	0798      	lsls	r0, r3, #30
     a26:	d503      	bpl.n	a30 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a28:	2302      	movs	r3, #2
     a2a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     a2c:	3318      	adds	r3, #24
     a2e:	e7ea      	b.n	a06 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a30:	0758      	lsls	r0, r3, #29
     a32:	d503      	bpl.n	a3c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a34:	2304      	movs	r3, #4
     a36:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     a38:	331a      	adds	r3, #26
     a3a:	e7e4      	b.n	a06 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a3c:	07d8      	lsls	r0, r3, #31
     a3e:	d503      	bpl.n	a48 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a40:	2301      	movs	r3, #1
     a42:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     a44:	3312      	adds	r3, #18
     a46:	e7de      	b.n	a06 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     a48:	06d8      	lsls	r0, r3, #27
     a4a:	d503      	bpl.n	a54 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a4c:	2310      	movs	r3, #16
     a4e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     a50:	3332      	adds	r3, #50	; 0x32
     a52:	e7d8      	b.n	a06 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     a54:	069b      	lsls	r3, r3, #26
     a56:	d503      	bpl.n	a60 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a58:	2320      	movs	r3, #32
     a5a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     a5c:	3321      	adds	r3, #33	; 0x21
     a5e:	e7d2      	b.n	a06 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     a60:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     a62:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     a64:	2300      	movs	r3, #0
     a66:	e7ce      	b.n	a06 <usart_read_wait+0x8>

00000a68 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a6a:	0080      	lsls	r0, r0, #2
     a6c:	4b64      	ldr	r3, [pc, #400]	; (c00 <_usart_interrupt_handler+0x198>)
     a6e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a70:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a72:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     a74:	2b00      	cmp	r3, #0
     a76:	d1fc      	bne.n	a72 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a78:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     a7a:	7da6      	ldrb	r6, [r4, #22]
     a7c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     a7e:	2330      	movs	r3, #48	; 0x30
     a80:	5ceb      	ldrb	r3, [r5, r3]
     a82:	2231      	movs	r2, #49	; 0x31
     a84:	5caf      	ldrb	r7, [r5, r2]
     a86:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a88:	07f3      	lsls	r3, r6, #31
     a8a:	d522      	bpl.n	ad2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     a8c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a8e:	b29b      	uxth	r3, r3
     a90:	2b00      	cmp	r3, #0
     a92:	d01c      	beq.n	ace <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a96:	7813      	ldrb	r3, [r2, #0]
     a98:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a9a:	1c51      	adds	r1, r2, #1
     a9c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a9e:	7969      	ldrb	r1, [r5, #5]
     aa0:	2901      	cmp	r1, #1
     aa2:	d00e      	beq.n	ac2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     aa4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     aa6:	05db      	lsls	r3, r3, #23
     aa8:	0ddb      	lsrs	r3, r3, #23
     aaa:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     aac:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     aae:	3b01      	subs	r3, #1
     ab0:	b29b      	uxth	r3, r3
     ab2:	85eb      	strh	r3, [r5, #46]	; 0x2e
     ab4:	2b00      	cmp	r3, #0
     ab6:	d10c      	bne.n	ad2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ab8:	3301      	adds	r3, #1
     aba:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     abc:	3301      	adds	r3, #1
     abe:	75a3      	strb	r3, [r4, #22]
     ac0:	e007      	b.n	ad2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ac2:	7851      	ldrb	r1, [r2, #1]
     ac4:	0209      	lsls	r1, r1, #8
     ac6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     ac8:	3202      	adds	r2, #2
     aca:	62aa      	str	r2, [r5, #40]	; 0x28
     acc:	e7eb      	b.n	aa6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ace:	2301      	movs	r3, #1
     ad0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     ad2:	07b3      	lsls	r3, r6, #30
     ad4:	d506      	bpl.n	ae4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ad6:	2302      	movs	r3, #2
     ad8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     ada:	2200      	movs	r2, #0
     adc:	3331      	adds	r3, #49	; 0x31
     ade:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     ae0:	07fb      	lsls	r3, r7, #31
     ae2:	d41e      	bmi.n	b22 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     ae4:	0773      	lsls	r3, r6, #29
     ae6:	d568      	bpl.n	bba <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
     ae8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     aea:	b29b      	uxth	r3, r3
     aec:	2b00      	cmp	r3, #0
     aee:	d062      	beq.n	bb6 <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     af0:	8b63      	ldrh	r3, [r4, #26]
     af2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     af4:	071a      	lsls	r2, r3, #28
     af6:	d418      	bmi.n	b2a <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     af8:	227f      	movs	r2, #127	; 0x7f
     afa:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
     afc:	065a      	lsls	r2, r3, #25
     afe:	d501      	bpl.n	b04 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
     b00:	2240      	movs	r2, #64	; 0x40
     b02:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b04:	2b00      	cmp	r3, #0
     b06:	d033      	beq.n	b70 <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b08:	079a      	lsls	r2, r3, #30
     b0a:	d511      	bpl.n	b30 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     b0c:	221a      	movs	r2, #26
     b0e:	2332      	movs	r3, #50	; 0x32
     b10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b12:	3b30      	subs	r3, #48	; 0x30
     b14:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     b16:	077b      	lsls	r3, r7, #29
     b18:	d54f      	bpl.n	bba <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     b1a:	0028      	movs	r0, r5
     b1c:	696b      	ldr	r3, [r5, #20]
     b1e:	4798      	blx	r3
     b20:	e04b      	b.n	bba <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b22:	0028      	movs	r0, r5
     b24:	68eb      	ldr	r3, [r5, #12]
     b26:	4798      	blx	r3
     b28:	e7dc      	b.n	ae4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b2a:	2277      	movs	r2, #119	; 0x77
     b2c:	4013      	ands	r3, r2
     b2e:	e7e5      	b.n	afc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b30:	075a      	lsls	r2, r3, #29
     b32:	d505      	bpl.n	b40 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     b34:	221e      	movs	r2, #30
     b36:	2332      	movs	r3, #50	; 0x32
     b38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b3a:	3b2e      	subs	r3, #46	; 0x2e
     b3c:	8363      	strh	r3, [r4, #26]
     b3e:	e7ea      	b.n	b16 <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b40:	07da      	lsls	r2, r3, #31
     b42:	d505      	bpl.n	b50 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     b44:	2213      	movs	r2, #19
     b46:	2332      	movs	r3, #50	; 0x32
     b48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b4a:	3b31      	subs	r3, #49	; 0x31
     b4c:	8363      	strh	r3, [r4, #26]
     b4e:	e7e2      	b.n	b16 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     b50:	06da      	lsls	r2, r3, #27
     b52:	d505      	bpl.n	b60 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     b54:	2242      	movs	r2, #66	; 0x42
     b56:	2332      	movs	r3, #50	; 0x32
     b58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b5a:	3b22      	subs	r3, #34	; 0x22
     b5c:	8363      	strh	r3, [r4, #26]
     b5e:	e7da      	b.n	b16 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     b60:	069b      	lsls	r3, r3, #26
     b62:	d5d8      	bpl.n	b16 <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     b64:	2241      	movs	r2, #65	; 0x41
     b66:	2332      	movs	r3, #50	; 0x32
     b68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b6a:	3b12      	subs	r3, #18
     b6c:	8363      	strh	r3, [r4, #26]
     b6e:	e7d2      	b.n	b16 <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b70:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b72:	05db      	lsls	r3, r3, #23
     b74:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     b76:	b2da      	uxtb	r2, r3
     b78:	6a69      	ldr	r1, [r5, #36]	; 0x24
     b7a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     b7c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     b7e:	1c51      	adds	r1, r2, #1
     b80:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b82:	7969      	ldrb	r1, [r5, #5]
     b84:	2901      	cmp	r1, #1
     b86:	d010      	beq.n	baa <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     b88:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b8a:	3b01      	subs	r3, #1
     b8c:	b29b      	uxth	r3, r3
     b8e:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b90:	2b00      	cmp	r3, #0
     b92:	d112      	bne.n	bba <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b94:	3304      	adds	r3, #4
     b96:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     b98:	2200      	movs	r2, #0
     b9a:	332e      	adds	r3, #46	; 0x2e
     b9c:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     b9e:	07bb      	lsls	r3, r7, #30
     ba0:	d50b      	bpl.n	bba <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ba2:	0028      	movs	r0, r5
     ba4:	692b      	ldr	r3, [r5, #16]
     ba6:	4798      	blx	r3
     ba8:	e007      	b.n	bba <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     baa:	0a1b      	lsrs	r3, r3, #8
     bac:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     bb0:	3301      	adds	r3, #1
     bb2:	626b      	str	r3, [r5, #36]	; 0x24
     bb4:	e7e8      	b.n	b88 <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     bb6:	2304      	movs	r3, #4
     bb8:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     bba:	06f3      	lsls	r3, r6, #27
     bbc:	d504      	bpl.n	bc8 <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     bbe:	2310      	movs	r3, #16
     bc0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     bc2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     bc4:	06fb      	lsls	r3, r7, #27
     bc6:	d40e      	bmi.n	be6 <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     bc8:	06b3      	lsls	r3, r6, #26
     bca:	d504      	bpl.n	bd6 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     bcc:	2320      	movs	r3, #32
     bce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     bd0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     bd2:	073b      	lsls	r3, r7, #28
     bd4:	d40b      	bmi.n	bee <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     bd6:	0733      	lsls	r3, r6, #28
     bd8:	d504      	bpl.n	be4 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     bda:	2308      	movs	r3, #8
     bdc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     bde:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     be0:	06bb      	lsls	r3, r7, #26
     be2:	d408      	bmi.n	bf6 <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     be6:	0028      	movs	r0, r5
     be8:	69eb      	ldr	r3, [r5, #28]
     bea:	4798      	blx	r3
     bec:	e7ec      	b.n	bc8 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     bee:	0028      	movs	r0, r5
     bf0:	69ab      	ldr	r3, [r5, #24]
     bf2:	4798      	blx	r3
     bf4:	e7ef      	b.n	bd6 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     bf6:	6a2b      	ldr	r3, [r5, #32]
     bf8:	0028      	movs	r0, r5
     bfa:	4798      	blx	r3
}
     bfc:	e7f2      	b.n	be4 <_usart_interrupt_handler+0x17c>
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	20000054 	.word	0x20000054

00000c04 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c04:	b510      	push	{r4, lr}
	switch (clock_source) {
     c06:	2807      	cmp	r0, #7
     c08:	d803      	bhi.n	c12 <system_clock_source_get_hz+0xe>
     c0a:	0080      	lsls	r0, r0, #2
     c0c:	4b0f      	ldr	r3, [pc, #60]	; (c4c <system_clock_source_get_hz+0x48>)
     c0e:	581b      	ldr	r3, [r3, r0]
     c10:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     c12:	2000      	movs	r0, #0
     c14:	e018      	b.n	c48 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
     c16:	4b0e      	ldr	r3, [pc, #56]	; (c50 <system_clock_source_get_hz+0x4c>)
     c18:	6858      	ldr	r0, [r3, #4]
     c1a:	e015      	b.n	c48 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
     c1c:	4b0d      	ldr	r3, [pc, #52]	; (c54 <system_clock_source_get_hz+0x50>)
     c1e:	7d59      	ldrb	r1, [r3, #21]
     c20:	0709      	lsls	r1, r1, #28
     c22:	0f09      	lsrs	r1, r1, #28
     c24:	3101      	adds	r1, #1
     c26:	480c      	ldr	r0, [pc, #48]	; (c58 <system_clock_source_get_hz+0x54>)
     c28:	4b0c      	ldr	r3, [pc, #48]	; (c5c <system_clock_source_get_hz+0x58>)
     c2a:	4798      	blx	r3
     c2c:	e00c      	b.n	c48 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
     c2e:	4b08      	ldr	r3, [pc, #32]	; (c50 <system_clock_source_get_hz+0x4c>)
     c30:	6898      	ldr	r0, [r3, #8]
     c32:	e009      	b.n	c48 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     c34:	4b07      	ldr	r3, [pc, #28]	; (c54 <system_clock_source_get_hz+0x50>)
     c36:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
     c38:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     c3a:	079b      	lsls	r3, r3, #30
     c3c:	d504      	bpl.n	c48 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
     c3e:	4b04      	ldr	r3, [pc, #16]	; (c50 <system_clock_source_get_hz+0x4c>)
     c40:	6818      	ldr	r0, [r3, #0]
     c42:	e001      	b.n	c48 <system_clock_source_get_hz+0x44>
		return 32768UL;
     c44:	2080      	movs	r0, #128	; 0x80
     c46:	0200      	lsls	r0, r0, #8
	}
}
     c48:	bd10      	pop	{r4, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	00001cbc 	.word	0x00001cbc
     c50:	20000044 	.word	0x20000044
     c54:	40001000 	.word	0x40001000
     c58:	02dc6c00 	.word	0x02dc6c00
     c5c:	00001af1 	.word	0x00001af1

00000c60 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
     c60:	b500      	push	{lr}
     c62:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
     c64:	2203      	movs	r2, #3
     c66:	4b10      	ldr	r3, [pc, #64]	; (ca8 <system_clock_init+0x48>)
     c68:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     c6a:	4a10      	ldr	r2, [pc, #64]	; (cac <system_clock_init+0x4c>)
     c6c:	6853      	ldr	r3, [r2, #4]
     c6e:	211e      	movs	r1, #30
     c70:	438b      	bics	r3, r1
     c72:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
     c74:	4a0e      	ldr	r2, [pc, #56]	; (cb0 <system_clock_init+0x50>)
     c76:	7d13      	ldrb	r3, [r2, #20]
     c78:	3162      	adds	r1, #98	; 0x62
     c7a:	430b      	orrs	r3, r1
     c7c:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     c7e:	4b0d      	ldr	r3, [pc, #52]	; (cb4 <system_clock_init+0x54>)
     c80:	4798      	blx	r3
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     c82:	2301      	movs	r3, #1
     c84:	4a0c      	ldr	r2, [pc, #48]	; (cb8 <system_clock_init+0x58>)
     c86:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     c88:	a901      	add	r1, sp, #4
     c8a:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     c8c:	2300      	movs	r3, #0
     c8e:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
     c90:	2206      	movs	r2, #6
     c92:	700a      	strb	r2, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     c94:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     c96:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     c98:	2000      	movs	r0, #0
     c9a:	4b08      	ldr	r3, [pc, #32]	; (cbc <system_clock_init+0x5c>)
     c9c:	4798      	blx	r3
     c9e:	2000      	movs	r0, #0
     ca0:	4b07      	ldr	r3, [pc, #28]	; (cc0 <system_clock_init+0x60>)
     ca2:	4798      	blx	r3
#endif

}
     ca4:	b005      	add	sp, #20
     ca6:	bd00      	pop	{pc}
     ca8:	40001800 	.word	0x40001800
     cac:	41004000 	.word	0x41004000
     cb0:	40001000 	.word	0x40001000
     cb4:	00000cc5 	.word	0x00000cc5
     cb8:	40000800 	.word	0x40000800
     cbc:	00000ce9 	.word	0x00000ce9
     cc0:	00000d95 	.word	0x00000d95

00000cc4 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     cc4:	4a06      	ldr	r2, [pc, #24]	; (ce0 <system_gclk_init+0x1c>)
     cc6:	6953      	ldr	r3, [r2, #20]
     cc8:	2180      	movs	r1, #128	; 0x80
     cca:	430b      	orrs	r3, r1
     ccc:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     cce:	2201      	movs	r2, #1
     cd0:	4b04      	ldr	r3, [pc, #16]	; (ce4 <system_gclk_init+0x20>)
     cd2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     cd4:	0019      	movs	r1, r3
     cd6:	780b      	ldrb	r3, [r1, #0]
     cd8:	4213      	tst	r3, r2
     cda:	d1fc      	bne.n	cd6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     cdc:	4770      	bx	lr
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	40000800 	.word	0x40000800
     ce4:	40001c00 	.word	0x40001c00

00000ce8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ce8:	b570      	push	{r4, r5, r6, lr}
     cea:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     cec:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     cee:	784b      	ldrb	r3, [r1, #1]
     cf0:	2b00      	cmp	r3, #0
     cf2:	d002      	beq.n	cfa <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     cf4:	2380      	movs	r3, #128	; 0x80
     cf6:	00db      	lsls	r3, r3, #3
     cf8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     cfa:	7a4b      	ldrb	r3, [r1, #9]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d002      	beq.n	d06 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     d00:	2380      	movs	r3, #128	; 0x80
     d02:	011b      	lsls	r3, r3, #4
     d04:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     d06:	6848      	ldr	r0, [r1, #4]
     d08:	2801      	cmp	r0, #1
     d0a:	d90f      	bls.n	d2c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     d0c:	1e43      	subs	r3, r0, #1
     d0e:	4218      	tst	r0, r3
     d10:	d131      	bne.n	d76 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     d12:	2802      	cmp	r0, #2
     d14:	d92d      	bls.n	d72 <system_gclk_gen_set_config+0x8a>
     d16:	2302      	movs	r3, #2
     d18:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     d1a:	3201      	adds	r2, #1
						mask <<= 1) {
     d1c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     d1e:	4298      	cmp	r0, r3
     d20:	d8fb      	bhi.n	d1a <system_gclk_gen_set_config+0x32>
     d22:	2380      	movs	r3, #128	; 0x80
     d24:	015b      	lsls	r3, r3, #5
     d26:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     d28:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     d2a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     d2c:	7a0b      	ldrb	r3, [r1, #8]
     d2e:	2b00      	cmp	r3, #0
     d30:	d002      	beq.n	d38 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     d32:	2380      	movs	r3, #128	; 0x80
     d34:	019b      	lsls	r3, r3, #6
     d36:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     d38:	2604      	movs	r6, #4
     d3a:	40a6      	lsls	r6, r4
     d3c:	4911      	ldr	r1, [pc, #68]	; (d84 <system_gclk_gen_set_config+0x9c>)
     d3e:	4a12      	ldr	r2, [pc, #72]	; (d88 <system_gclk_gen_set_config+0xa0>)
     d40:	684b      	ldr	r3, [r1, #4]
     d42:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     d44:	421e      	tst	r6, r3
     d46:	d1fb      	bne.n	d40 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     d48:	4b10      	ldr	r3, [pc, #64]	; (d8c <system_gclk_gen_set_config+0xa4>)
     d4a:	4798      	blx	r3
     d4c:	00a4      	lsls	r4, r4, #2
     d4e:	4b0d      	ldr	r3, [pc, #52]	; (d84 <system_gclk_gen_set_config+0x9c>)
     d50:	469c      	mov	ip, r3
     d52:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     d54:	6a22      	ldr	r2, [r4, #32]
     d56:	2380      	movs	r3, #128	; 0x80
     d58:	005b      	lsls	r3, r3, #1
     d5a:	401a      	ands	r2, r3
     d5c:	432a      	orrs	r2, r5
     d5e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     d60:	4661      	mov	r1, ip
     d62:	4a09      	ldr	r2, [pc, #36]	; (d88 <system_gclk_gen_set_config+0xa0>)
     d64:	684b      	ldr	r3, [r1, #4]
     d66:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     d68:	421e      	tst	r6, r3
     d6a:	d1fb      	bne.n	d64 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     d6c:	4b08      	ldr	r3, [pc, #32]	; (d90 <system_gclk_gen_set_config+0xa8>)
     d6e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     d70:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     d72:	2200      	movs	r2, #0
     d74:	e7d5      	b.n	d22 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     d76:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     d78:	2380      	movs	r3, #128	; 0x80
     d7a:	009b      	lsls	r3, r3, #2
     d7c:	4318      	orrs	r0, r3
     d7e:	4305      	orrs	r5, r0
     d80:	e7d4      	b.n	d2c <system_gclk_gen_set_config+0x44>
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	40001c00 	.word	0x40001c00
     d88:	000007fc 	.word	0x000007fc
     d8c:	0000011d 	.word	0x0000011d
     d90:	0000015d 	.word	0x0000015d

00000d94 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     d94:	b510      	push	{r4, lr}
     d96:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     d98:	2204      	movs	r2, #4
     d9a:	4082      	lsls	r2, r0
     d9c:	4809      	ldr	r0, [pc, #36]	; (dc4 <system_gclk_gen_enable+0x30>)
     d9e:	490a      	ldr	r1, [pc, #40]	; (dc8 <system_gclk_gen_enable+0x34>)
     da0:	6843      	ldr	r3, [r0, #4]
     da2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     da4:	421a      	tst	r2, r3
     da6:	d1fb      	bne.n	da0 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     da8:	4b08      	ldr	r3, [pc, #32]	; (dcc <system_gclk_gen_enable+0x38>)
     daa:	4798      	blx	r3
     dac:	00a4      	lsls	r4, r4, #2
     dae:	4b05      	ldr	r3, [pc, #20]	; (dc4 <system_gclk_gen_enable+0x30>)
     db0:	469c      	mov	ip, r3
     db2:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     db4:	6a22      	ldr	r2, [r4, #32]
     db6:	2380      	movs	r3, #128	; 0x80
     db8:	005b      	lsls	r3, r3, #1
     dba:	4313      	orrs	r3, r2
     dbc:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     dbe:	4b04      	ldr	r3, [pc, #16]	; (dd0 <system_gclk_gen_enable+0x3c>)
     dc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     dc2:	bd10      	pop	{r4, pc}
     dc4:	40001c00 	.word	0x40001c00
     dc8:	000007fc 	.word	0x000007fc
     dcc:	0000011d 	.word	0x0000011d
     dd0:	0000015d 	.word	0x0000015d

00000dd4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dd6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     dd8:	2204      	movs	r2, #4
     dda:	4082      	lsls	r2, r0
     ddc:	4812      	ldr	r0, [pc, #72]	; (e28 <system_gclk_gen_get_hz+0x54>)
     dde:	4913      	ldr	r1, [pc, #76]	; (e2c <system_gclk_gen_get_hz+0x58>)
     de0:	6843      	ldr	r3, [r0, #4]
     de2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     de4:	421a      	tst	r2, r3
     de6:	d1fb      	bne.n	de0 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     de8:	4b11      	ldr	r3, [pc, #68]	; (e30 <system_gclk_gen_get_hz+0x5c>)
     dea:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     dec:	4f0e      	ldr	r7, [pc, #56]	; (e28 <system_gclk_gen_get_hz+0x54>)
     dee:	3408      	adds	r4, #8
     df0:	00a4      	lsls	r4, r4, #2
     df2:	59e0      	ldr	r0, [r4, r7]
     df4:	0740      	lsls	r0, r0, #29
     df6:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
     df8:	4b0e      	ldr	r3, [pc, #56]	; (e34 <system_gclk_gen_get_hz+0x60>)
     dfa:	4798      	blx	r3
     dfc:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     dfe:	59e5      	ldr	r5, [r4, r7]
     e00:	04ed      	lsls	r5, r5, #19
     e02:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     e04:	59e4      	ldr	r4, [r4, r7]
     e06:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     e08:	4b0b      	ldr	r3, [pc, #44]	; (e38 <system_gclk_gen_get_hz+0x64>)
     e0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     e0c:	2d00      	cmp	r5, #0
     e0e:	d107      	bne.n	e20 <system_gclk_gen_get_hz+0x4c>
     e10:	2c01      	cmp	r4, #1
     e12:	d907      	bls.n	e24 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     e14:	0021      	movs	r1, r4
     e16:	0030      	movs	r0, r6
     e18:	4b08      	ldr	r3, [pc, #32]	; (e3c <system_gclk_gen_get_hz+0x68>)
     e1a:	4798      	blx	r3
     e1c:	0006      	movs	r6, r0
     e1e:	e001      	b.n	e24 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     e20:	3401      	adds	r4, #1
     e22:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
     e24:	0030      	movs	r0, r6
     e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e28:	40001c00 	.word	0x40001c00
     e2c:	000007fc 	.word	0x000007fc
     e30:	0000011d 	.word	0x0000011d
     e34:	00000c05 	.word	0x00000c05
     e38:	0000015d 	.word	0x0000015d
     e3c:	00001af1 	.word	0x00001af1

00000e40 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     e40:	b510      	push	{r4, lr}
     e42:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     e44:	4b09      	ldr	r3, [pc, #36]	; (e6c <system_gclk_chan_enable+0x2c>)
     e46:	4798      	blx	r3
     e48:	00a0      	lsls	r0, r4, #2
     e4a:	4b09      	ldr	r3, [pc, #36]	; (e70 <system_gclk_chan_enable+0x30>)
     e4c:	469c      	mov	ip, r3
     e4e:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     e50:	2280      	movs	r2, #128	; 0x80
     e52:	5883      	ldr	r3, [r0, r2]
     e54:	2140      	movs	r1, #64	; 0x40
     e56:	430b      	orrs	r3, r1
     e58:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     e5a:	3140      	adds	r1, #64	; 0x40
     e5c:	3a40      	subs	r2, #64	; 0x40
     e5e:	5843      	ldr	r3, [r0, r1]
     e60:	421a      	tst	r2, r3
     e62:	d0fc      	beq.n	e5e <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
     e64:	4b03      	ldr	r3, [pc, #12]	; (e74 <system_gclk_chan_enable+0x34>)
     e66:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     e68:	bd10      	pop	{r4, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	0000011d 	.word	0x0000011d
     e70:	40001c00 	.word	0x40001c00
     e74:	0000015d 	.word	0x0000015d

00000e78 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     e78:	b510      	push	{r4, lr}
     e7a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     e7c:	4b09      	ldr	r3, [pc, #36]	; (ea4 <system_gclk_chan_disable+0x2c>)
     e7e:	4798      	blx	r3
     e80:	00a0      	lsls	r0, r4, #2
     e82:	4b09      	ldr	r3, [pc, #36]	; (ea8 <system_gclk_chan_disable+0x30>)
     e84:	469c      	mov	ip, r3
     e86:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     e88:	2280      	movs	r2, #128	; 0x80
     e8a:	5883      	ldr	r3, [r0, r2]
     e8c:	2140      	movs	r1, #64	; 0x40
     e8e:	438b      	bics	r3, r1
     e90:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     e92:	3140      	adds	r1, #64	; 0x40
     e94:	3a40      	subs	r2, #64	; 0x40
     e96:	5843      	ldr	r3, [r0, r1]
     e98:	421a      	tst	r2, r3
     e9a:	d1fc      	bne.n	e96 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
     e9c:	4b03      	ldr	r3, [pc, #12]	; (eac <system_gclk_chan_disable+0x34>)
     e9e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     ea0:	bd10      	pop	{r4, pc}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	0000011d 	.word	0x0000011d
     ea8:	40001c00 	.word	0x40001c00
     eac:	0000015d 	.word	0x0000015d

00000eb0 <system_gclk_chan_set_config>:
{
     eb0:	b570      	push	{r4, r5, r6, lr}
     eb2:	0004      	movs	r4, r0
     eb4:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
     eb6:	4b05      	ldr	r3, [pc, #20]	; (ecc <system_gclk_chan_set_config+0x1c>)
     eb8:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     eba:	782a      	ldrb	r2, [r5, #0]
     ebc:	230f      	movs	r3, #15
     ebe:	4013      	ands	r3, r2
     ec0:	3420      	adds	r4, #32
     ec2:	00a4      	lsls	r4, r4, #2
     ec4:	4a02      	ldr	r2, [pc, #8]	; (ed0 <system_gclk_chan_set_config+0x20>)
     ec6:	50a3      	str	r3, [r4, r2]
}
     ec8:	bd70      	pop	{r4, r5, r6, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00000e79 	.word	0x00000e79
     ed0:	40001c00 	.word	0x40001c00

00000ed4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     ed4:	b510      	push	{r4, lr}
     ed6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ed8:	4b06      	ldr	r3, [pc, #24]	; (ef4 <system_gclk_chan_get_hz+0x20>)
     eda:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
     edc:	3420      	adds	r4, #32
     ede:	00a4      	lsls	r4, r4, #2
     ee0:	4b05      	ldr	r3, [pc, #20]	; (ef8 <system_gclk_chan_get_hz+0x24>)
     ee2:	58e4      	ldr	r4, [r4, r3]
     ee4:	0724      	lsls	r4, r4, #28
     ee6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     ee8:	4b04      	ldr	r3, [pc, #16]	; (efc <system_gclk_chan_get_hz+0x28>)
     eea:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     eec:	0020      	movs	r0, r4
     eee:	4b04      	ldr	r3, [pc, #16]	; (f00 <system_gclk_chan_get_hz+0x2c>)
     ef0:	4798      	blx	r3
}
     ef2:	bd10      	pop	{r4, pc}
     ef4:	0000011d 	.word	0x0000011d
     ef8:	40001c00 	.word	0x40001c00
     efc:	0000015d 	.word	0x0000015d
     f00:	00000dd5 	.word	0x00000dd5

00000f04 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     f04:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     f06:	78d3      	ldrb	r3, [r2, #3]
     f08:	2b00      	cmp	r3, #0
     f0a:	d135      	bne.n	f78 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     f0c:	7813      	ldrb	r3, [r2, #0]
     f0e:	2b80      	cmp	r3, #128	; 0x80
     f10:	d029      	beq.n	f66 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     f12:	061b      	lsls	r3, r3, #24
     f14:	2480      	movs	r4, #128	; 0x80
     f16:	0264      	lsls	r4, r4, #9
     f18:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     f1a:	7854      	ldrb	r4, [r2, #1]
     f1c:	2502      	movs	r5, #2
     f1e:	43ac      	bics	r4, r5
     f20:	d106      	bne.n	f30 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     f22:	7894      	ldrb	r4, [r2, #2]
     f24:	2c00      	cmp	r4, #0
     f26:	d120      	bne.n	f6a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     f28:	2480      	movs	r4, #128	; 0x80
     f2a:	02a4      	lsls	r4, r4, #10
     f2c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     f2e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     f30:	7854      	ldrb	r4, [r2, #1]
     f32:	3c01      	subs	r4, #1
     f34:	2c01      	cmp	r4, #1
     f36:	d91c      	bls.n	f72 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     f38:	040d      	lsls	r5, r1, #16
     f3a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     f3c:	24a0      	movs	r4, #160	; 0xa0
     f3e:	05e4      	lsls	r4, r4, #23
     f40:	432c      	orrs	r4, r5
     f42:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f44:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     f46:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     f48:	24d0      	movs	r4, #208	; 0xd0
     f4a:	0624      	lsls	r4, r4, #24
     f4c:	432c      	orrs	r4, r5
     f4e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f50:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     f52:	78d4      	ldrb	r4, [r2, #3]
     f54:	2c00      	cmp	r4, #0
     f56:	d122      	bne.n	f9e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     f58:	035b      	lsls	r3, r3, #13
     f5a:	d51c      	bpl.n	f96 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     f5c:	7893      	ldrb	r3, [r2, #2]
     f5e:	2b01      	cmp	r3, #1
     f60:	d01e      	beq.n	fa0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     f62:	6141      	str	r1, [r0, #20]
     f64:	e017      	b.n	f96 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     f66:	2300      	movs	r3, #0
     f68:	e7d7      	b.n	f1a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     f6a:	24c0      	movs	r4, #192	; 0xc0
     f6c:	02e4      	lsls	r4, r4, #11
     f6e:	4323      	orrs	r3, r4
     f70:	e7dd      	b.n	f2e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     f72:	4c0d      	ldr	r4, [pc, #52]	; (fa8 <_system_pinmux_config+0xa4>)
     f74:	4023      	ands	r3, r4
     f76:	e7df      	b.n	f38 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     f78:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     f7a:	040c      	lsls	r4, r1, #16
     f7c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     f7e:	23a0      	movs	r3, #160	; 0xa0
     f80:	05db      	lsls	r3, r3, #23
     f82:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f84:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     f86:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     f88:	23d0      	movs	r3, #208	; 0xd0
     f8a:	061b      	lsls	r3, r3, #24
     f8c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f8e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     f90:	78d3      	ldrb	r3, [r2, #3]
     f92:	2b00      	cmp	r3, #0
     f94:	d103      	bne.n	f9e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     f96:	7853      	ldrb	r3, [r2, #1]
     f98:	3b01      	subs	r3, #1
     f9a:	2b01      	cmp	r3, #1
     f9c:	d902      	bls.n	fa4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     f9e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     fa0:	6181      	str	r1, [r0, #24]
     fa2:	e7f8      	b.n	f96 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     fa4:	6081      	str	r1, [r0, #8]
}
     fa6:	e7fa      	b.n	f9e <_system_pinmux_config+0x9a>
     fa8:	fffbffff 	.word	0xfffbffff

00000fac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     fac:	b510      	push	{r4, lr}
     fae:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     fb0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     fb2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     fb4:	2900      	cmp	r1, #0
     fb6:	d105      	bne.n	fc4 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
     fb8:	0943      	lsrs	r3, r0, #5
     fba:	01db      	lsls	r3, r3, #7
     fbc:	2182      	movs	r1, #130	; 0x82
     fbe:	05c9      	lsls	r1, r1, #23
     fc0:	468c      	mov	ip, r1
     fc2:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     fc4:	241f      	movs	r4, #31
     fc6:	4020      	ands	r0, r4
     fc8:	2101      	movs	r1, #1
     fca:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     fcc:	0018      	movs	r0, r3
     fce:	4b01      	ldr	r3, [pc, #4]	; (fd4 <system_pinmux_pin_set_config+0x28>)
     fd0:	4798      	blx	r3
}
     fd2:	bd10      	pop	{r4, pc}
     fd4:	00000f05 	.word	0x00000f05

00000fd8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     fd8:	4770      	bx	lr
	...

00000fdc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     fdc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     fde:	4b05      	ldr	r3, [pc, #20]	; (ff4 <system_init+0x18>)
     fe0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     fe2:	4b05      	ldr	r3, [pc, #20]	; (ff8 <system_init+0x1c>)
     fe4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     fe6:	4b05      	ldr	r3, [pc, #20]	; (ffc <system_init+0x20>)
     fe8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     fea:	4b05      	ldr	r3, [pc, #20]	; (1000 <system_init+0x24>)
     fec:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     fee:	4b05      	ldr	r3, [pc, #20]	; (1004 <system_init+0x28>)
     ff0:	4798      	blx	r3
}
     ff2:	bd10      	pop	{r4, pc}
     ff4:	00000c61 	.word	0x00000c61
     ff8:	0000018d 	.word	0x0000018d
     ffc:	00000fd9 	.word	0x00000fd9
    1000:	00000fd9 	.word	0x00000fd9
    1004:	00000fd9 	.word	0x00000fd9

00001008 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1008:	e7fe      	b.n	1008 <Dummy_Handler>
	...

0000100c <Reset_Handler>:
{
    100c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    100e:	4a17      	ldr	r2, [pc, #92]	; (106c <Reset_Handler+0x60>)
    1010:	4b17      	ldr	r3, [pc, #92]	; (1070 <Reset_Handler+0x64>)
    1012:	429a      	cmp	r2, r3
    1014:	d011      	beq.n	103a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1016:	001a      	movs	r2, r3
    1018:	4b16      	ldr	r3, [pc, #88]	; (1074 <Reset_Handler+0x68>)
    101a:	429a      	cmp	r2, r3
    101c:	d20d      	bcs.n	103a <Reset_Handler+0x2e>
    101e:	4a16      	ldr	r2, [pc, #88]	; (1078 <Reset_Handler+0x6c>)
    1020:	3303      	adds	r3, #3
    1022:	1a9b      	subs	r3, r3, r2
    1024:	089b      	lsrs	r3, r3, #2
    1026:	3301      	adds	r3, #1
    1028:	009b      	lsls	r3, r3, #2
    102a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    102c:	4810      	ldr	r0, [pc, #64]	; (1070 <Reset_Handler+0x64>)
    102e:	490f      	ldr	r1, [pc, #60]	; (106c <Reset_Handler+0x60>)
    1030:	588c      	ldr	r4, [r1, r2]
    1032:	5084      	str	r4, [r0, r2]
    1034:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1036:	429a      	cmp	r2, r3
    1038:	d1fa      	bne.n	1030 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    103a:	4a10      	ldr	r2, [pc, #64]	; (107c <Reset_Handler+0x70>)
    103c:	4b10      	ldr	r3, [pc, #64]	; (1080 <Reset_Handler+0x74>)
    103e:	429a      	cmp	r2, r3
    1040:	d20a      	bcs.n	1058 <Reset_Handler+0x4c>
    1042:	43d3      	mvns	r3, r2
    1044:	490e      	ldr	r1, [pc, #56]	; (1080 <Reset_Handler+0x74>)
    1046:	185b      	adds	r3, r3, r1
    1048:	2103      	movs	r1, #3
    104a:	438b      	bics	r3, r1
    104c:	3304      	adds	r3, #4
    104e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1050:	2100      	movs	r1, #0
    1052:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1054:	4293      	cmp	r3, r2
    1056:	d1fc      	bne.n	1052 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1058:	4a0a      	ldr	r2, [pc, #40]	; (1084 <Reset_Handler+0x78>)
    105a:	21ff      	movs	r1, #255	; 0xff
    105c:	4b0a      	ldr	r3, [pc, #40]	; (1088 <Reset_Handler+0x7c>)
    105e:	438b      	bics	r3, r1
    1060:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    1062:	4b0a      	ldr	r3, [pc, #40]	; (108c <Reset_Handler+0x80>)
    1064:	4798      	blx	r3
        main();
    1066:	4b0a      	ldr	r3, [pc, #40]	; (1090 <Reset_Handler+0x84>)
    1068:	4798      	blx	r3
    106a:	e7fe      	b.n	106a <Reset_Handler+0x5e>
    106c:	00001d48 	.word	0x00001d48
    1070:	20000000 	.word	0x20000000
    1074:	20000004 	.word	0x20000004
    1078:	20000004 	.word	0x20000004
    107c:	20000004 	.word	0x20000004
    1080:	20000214 	.word	0x20000214
    1084:	e000ed00 	.word	0xe000ed00
    1088:	00000000 	.word	0x00000000
    108c:	00001c5d 	.word	0x00001c5d
    1090:	00001095 	.word	0x00001095

00001094 <main>:
/**
 *  \brief SAM-BA Main loop.
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    1094:	b510      	push	{r4, lr}
    1096:	b082      	sub	sp, #8
    1098:	2280      	movs	r2, #128	; 0x80
    109a:	0212      	lsls	r2, r2, #8
    109c:	2382      	movs	r3, #130	; 0x82
    109e:	05db      	lsls	r3, r3, #23
    10a0:	619a      	str	r2, [r3, #24]
	app_start_address = *(uint32_t *)(APP_START_ADDRESS + 4);
    10a2:	4b18      	ldr	r3, [pc, #96]	; (1104 <main+0x70>)
    10a4:	681a      	ldr	r2, [r3, #0]
	if (app_start_address == 0xFFFFFFFF) {
    10a6:	1c53      	adds	r3, r2, #1
    10a8:	d018      	beq.n	10dc <main+0x48>
	boot_port->DIRCLR.reg = GPIO_BOOT_PIN_MASK;
    10aa:	2382      	movs	r3, #130	; 0x82
    10ac:	05db      	lsls	r3, r3, #23
    10ae:	2180      	movs	r1, #128	; 0x80
    10b0:	0549      	lsls	r1, r1, #21
    10b2:	6059      	str	r1, [r3, #4]
	boot_port->PINCFG[BOOT_LOAD_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    10b4:	2406      	movs	r4, #6
    10b6:	205c      	movs	r0, #92	; 0x5c
    10b8:	541c      	strb	r4, [r3, r0]
	boot_port->OUTSET.reg = GPIO_BOOT_PIN_MASK;
    10ba:	6199      	str	r1, [r3, #24]
	boot_en = (boot_port->IN.reg) & GPIO_BOOT_PIN_MASK;
    10bc:	6a1b      	ldr	r3, [r3, #32]
    10be:	00db      	lsls	r3, r3, #3
    10c0:	0fdb      	lsrs	r3, r3, #31
    10c2:	4669      	mov	r1, sp
    10c4:	71cb      	strb	r3, [r1, #7]
	if (!boot_en) {
    10c6:	79cb      	ldrb	r3, [r1, #7]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d007      	beq.n	10dc <main+0x48>
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    10cc:	2380      	movs	r3, #128	; 0x80
    10ce:	019b      	lsls	r3, r3, #6
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    10d0:	6819      	ldr	r1, [r3, #0]
    10d2:	f381 8808 	msr	MSP, r1
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    10d6:	490c      	ldr	r1, [pc, #48]	; (1108 <main+0x74>)
    10d8:	608b      	str	r3, [r1, #8]
	asm("bx %0"::"r"(app_start_address));
    10da:	4710      	bx	r2
	/* Jump in application if condition is satisfied */
	check_start_application();

	/* We have determined we should stay in the monitor. */
	/* System initialization */
	system_init();
    10dc:	4b0b      	ldr	r3, [pc, #44]	; (110c <main+0x78>)
    10de:	4798      	blx	r3
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	/* Start USB stack */
	udc_start();
#endif
	/* UART is enabled in all cases */
	usart_open();
    10e0:	4b0b      	ldr	r3, [pc, #44]	; (1110 <main+0x7c>)
    10e2:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    10e4:	2280      	movs	r2, #128	; 0x80
    10e6:	0212      	lsls	r2, r2, #8
    10e8:	2382      	movs	r3, #130	; 0x82
    10ea:	05db      	lsls	r3, r3, #23
    10ec:	615a      	str	r2, [r3, #20]
				sam_ba_monitor_run();
			}
		}
#endif
		/* Check if a '#' has been received */
		if (usart_sharp_received()) {
    10ee:	4c09      	ldr	r4, [pc, #36]	; (1114 <main+0x80>)
    10f0:	47a0      	blx	r4
    10f2:	2800      	cmp	r0, #0
    10f4:	d0fc      	beq.n	10f0 <main+0x5c>
			sam_ba_monitor_init(SAM_BA_INTERFACE_USART);
    10f6:	2001      	movs	r0, #1
    10f8:	4b07      	ldr	r3, [pc, #28]	; (1118 <main+0x84>)
    10fa:	4798      	blx	r3
			/* SAM-BA on UART loop */
			while(1) {
				sam_ba_monitor_run();
    10fc:	4c07      	ldr	r4, [pc, #28]	; (111c <main+0x88>)
    10fe:	47a0      	blx	r4
    1100:	e7fd      	b.n	10fe <main+0x6a>
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	00002004 	.word	0x00002004
    1108:	e000ed00 	.word	0xe000ed00
    110c:	00000fdd 	.word	0x00000fdd
    1110:	0000158d 	.word	0x0000158d
    1114:	00001715 	.word	0x00001715
    1118:	00001121 	.word	0x00001121
    111c:	000011ed 	.word	0x000011ed

00001120 <sam_ba_monitor_init>:
 * \param com_interface  Communication interface to be used.
 */
void sam_ba_monitor_init(uint8_t com_interface)
{
	/* Selects the requested interface for future actions */
	if (com_interface == SAM_BA_INTERFACE_USART)
    1120:	2801      	cmp	r0, #1
    1122:	d000      	beq.n	1126 <sam_ba_monitor_init+0x6>
		ptr_monitor_if = (t_monitor_if*) &uart_if;
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	if (com_interface == SAM_BA_INTERFACE_USBCDC)
		ptr_monitor_if = (t_monitor_if*) &usbcdc_if;
#endif
}
    1124:	4770      	bx	lr
		ptr_monitor_if = (t_monitor_if*) &uart_if;
    1126:	4a02      	ldr	r2, [pc, #8]	; (1130 <sam_ba_monitor_init+0x10>)
    1128:	4b02      	ldr	r3, [pc, #8]	; (1134 <sam_ba_monitor_init+0x14>)
    112a:	601a      	str	r2, [r3, #0]
}
    112c:	e7fa      	b.n	1124 <sam_ba_monitor_init+0x4>
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	00001d0c 	.word	0x00001d0c
    1134:	200000c4 	.word	0x200000c4

00001138 <sam_ba_putdata_term>:
 *
 * \param *data  Data pointer
 * \param length Length of the data
 */
void sam_ba_putdata_term(uint8_t* data, uint32_t length)
{
    1138:	b5f0      	push	{r4, r5, r6, r7, lr}
    113a:	b085      	sub	sp, #20
	uint8_t temp, buf[12], *data_ascii;
	uint32_t i, int_value;

	if (b_terminal_mode)
    113c:	4b1f      	ldr	r3, [pc, #124]	; (11bc <sam_ba_putdata_term+0x84>)
    113e:	781b      	ldrb	r3, [r3, #0]
    1140:	2b00      	cmp	r3, #0
    1142:	d036      	beq.n	11b2 <sam_ba_putdata_term+0x7a>
	{
		if (length == 4)
    1144:	2904      	cmp	r1, #4
    1146:	d01b      	beq.n	1180 <sam_ba_putdata_term+0x48>
			int_value = *(uint32_t *) data;
		else if (length == 2)
    1148:	2902      	cmp	r1, #2
    114a:	d022      	beq.n	1192 <sam_ba_putdata_term+0x5a>
			int_value = *(uint16_t *) data;
		else
			int_value = *(uint8_t *) data;
    114c:	7800      	ldrb	r0, [r0, #0]

		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;
    114e:	004d      	lsls	r5, r1, #1
    1150:	ab04      	add	r3, sp, #16
    1152:	195a      	adds	r2, r3, r5
    1154:	3a0b      	subs	r2, #11

		for (i = 0; i < length * 2; i++)
    1156:	2d00      	cmp	r5, #0
    1158:	d117      	bne.n	118a <sam_ba_putdata_term+0x52>
				*data_ascii = temp + 0x37;

			int_value >>= 4;
			data_ascii--;
		}
		buf[0] = '0';
    115a:	a801      	add	r0, sp, #4
    115c:	2330      	movs	r3, #48	; 0x30
    115e:	7003      	strb	r3, [r0, #0]
		buf[1] = 'x';
    1160:	3348      	adds	r3, #72	; 0x48
    1162:	7043      	strb	r3, [r0, #1]
		buf[length * 2 + 2] = '\n';
    1164:	3101      	adds	r1, #1
    1166:	0049      	lsls	r1, r1, #1
    1168:	3b6e      	subs	r3, #110	; 0x6e
    116a:	5443      	strb	r3, [r0, r1]
		buf[length * 2 + 3] = '\r';
    116c:	1945      	adds	r5, r0, r5
    116e:	3303      	adds	r3, #3
    1170:	70eb      	strb	r3, [r5, #3]
		ptr_monitor_if->putdata(buf, length * 2 + 4);
    1172:	3102      	adds	r1, #2
    1174:	4b12      	ldr	r3, [pc, #72]	; (11c0 <sam_ba_putdata_term+0x88>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	68db      	ldr	r3, [r3, #12]
    117a:	4798      	blx	r3
	}
	else
		ptr_monitor_if->putdata(data, length);
	return;
}
    117c:	b005      	add	sp, #20
    117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			int_value = *(uint32_t *) data;
    1180:	6800      	ldr	r0, [r0, #0]
		data_ascii += length * 2 - 1;
    1182:	004d      	lsls	r5, r1, #1
    1184:	ab04      	add	r3, sp, #16
    1186:	195a      	adds	r2, r3, r5
    1188:	3a0b      	subs	r2, #11
{
    118a:	2400      	movs	r4, #0
			temp = (uint8_t) (int_value & 0xf);
    118c:	260f      	movs	r6, #15
				*data_ascii = temp | 0x30;
    118e:	2730      	movs	r7, #48	; 0x30
    1190:	e008      	b.n	11a4 <sam_ba_putdata_term+0x6c>
			int_value = *(uint16_t *) data;
    1192:	8800      	ldrh	r0, [r0, #0]
    1194:	e7f5      	b.n	1182 <sam_ba_putdata_term+0x4a>
				*data_ascii = temp + 0x37;
    1196:	3337      	adds	r3, #55	; 0x37
    1198:	7013      	strb	r3, [r2, #0]
			int_value >>= 4;
    119a:	0900      	lsrs	r0, r0, #4
			data_ascii--;
    119c:	3a01      	subs	r2, #1
		for (i = 0; i < length * 2; i++)
    119e:	3401      	adds	r4, #1
    11a0:	42ac      	cmp	r4, r5
    11a2:	d2da      	bcs.n	115a <sam_ba_putdata_term+0x22>
			temp = (uint8_t) (int_value & 0xf);
    11a4:	0033      	movs	r3, r6
    11a6:	4003      	ands	r3, r0
			if (temp <= 0x9)
    11a8:	2b09      	cmp	r3, #9
    11aa:	d8f4      	bhi.n	1196 <sam_ba_putdata_term+0x5e>
				*data_ascii = temp | 0x30;
    11ac:	433b      	orrs	r3, r7
    11ae:	7013      	strb	r3, [r2, #0]
    11b0:	e7f3      	b.n	119a <sam_ba_putdata_term+0x62>
		ptr_monitor_if->putdata(data, length);
    11b2:	4b03      	ldr	r3, [pc, #12]	; (11c0 <sam_ba_putdata_term+0x88>)
    11b4:	681b      	ldr	r3, [r3, #0]
    11b6:	68db      	ldr	r3, [r3, #12]
    11b8:	4798      	blx	r3
	return;
    11ba:	e7df      	b.n	117c <sam_ba_putdata_term+0x44>
    11bc:	20000050 	.word	0x20000050
    11c0:	200000c4 	.word	0x200000c4

000011c4 <call_applet>:
  __ASM volatile ("cpsid i" : : : "memory");
    11c4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    11c6:	f3bf 8f5f 	dmb	sy
 */
void call_applet(uint32_t address)
{
	uint32_t app_start_address;

	cpu_irq_disable();
    11ca:	2200      	movs	r2, #0
    11cc:	4b05      	ldr	r3, [pc, #20]	; (11e4 <call_applet+0x20>)
    11ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    11d0:	f3ef 8308 	mrs	r3, MSP

	sp = __get_MSP();
    11d4:	4a04      	ldr	r2, [pc, #16]	; (11e8 <call_applet+0x24>)
    11d6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    11d8:	6803      	ldr	r3, [r0, #0]
    11da:	f383 8808 	msr	MSP, r3

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(address + 4);

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
    11de:	6843      	ldr	r3, [r0, #4]
    11e0:	4718      	bx	r3
}
    11e2:	4770      	bx	lr
    11e4:	20000000 	.word	0x20000000
    11e8:	200000c8 	.word	0x200000c8

000011ec <sam_ba_monitor_run>:

/**
 * \brief This function starts the SAM-BA monitor.
 */
void sam_ba_monitor_run(void)
{
    11ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ee:	46de      	mov	lr, fp
    11f0:	4657      	mov	r7, sl
    11f2:	464e      	mov	r6, r9
    11f4:	4645      	mov	r5, r8
    11f6:	b5e0      	push	{r5, r6, r7, lr}
	ptr_data = NULL;
    11f8:	2200      	movs	r2, #0
    11fa:	4bcc      	ldr	r3, [pc, #816]	; (152c <sam_ba_monitor_run+0x340>)
    11fc:	601a      	str	r2, [r3, #0]
	command = 'z';
    11fe:	327a      	adds	r2, #122	; 0x7a
    1200:	4bcb      	ldr	r3, [pc, #812]	; (1530 <sam_ba_monitor_run+0x344>)
    1202:	701a      	strb	r2, [r3, #0]

	// Start waiting some cmd
	while (1)
	{
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    1204:	4bcb      	ldr	r3, [pc, #812]	; (1534 <sam_ba_monitor_run+0x348>)
    1206:	469a      	mov	sl, r3
    1208:	4bcb      	ldr	r3, [pc, #812]	; (1538 <sam_ba_monitor_run+0x34c>)
    120a:	469b      	mov	fp, r3
					{
						command = *ptr;
						current_number = 0;
					}
				}
				ptr++;
    120c:	4ccb      	ldr	r4, [pc, #812]	; (153c <sam_ba_monitor_run+0x350>)
						command = *ptr;
    120e:	4bc8      	ldr	r3, [pc, #800]	; (1530 <sam_ba_monitor_run+0x344>)
    1210:	4698      	mov	r8, r3
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    1212:	465b      	mov	r3, fp
    1214:	681b      	ldr	r3, [r3, #0]
    1216:	691b      	ldr	r3, [r3, #16]
    1218:	2140      	movs	r1, #64	; 0x40
    121a:	4650      	mov	r0, sl
    121c:	4798      	blx	r3
    121e:	4bc8      	ldr	r3, [pc, #800]	; (1540 <sam_ba_monitor_run+0x354>)
    1220:	6018      	str	r0, [r3, #0]
		ptr = data;
    1222:	4bc6      	ldr	r3, [pc, #792]	; (153c <sam_ba_monitor_run+0x350>)
    1224:	4652      	mov	r2, sl
    1226:	601a      	str	r2, [r3, #0]
		for (i = 0; i < length; i++)
    1228:	2200      	movs	r2, #0
    122a:	4bc6      	ldr	r3, [pc, #792]	; (1544 <sam_ba_monitor_run+0x358>)
    122c:	601a      	str	r2, [r3, #0]
    122e:	2800      	cmp	r0, #0
    1230:	d0ef      	beq.n	1212 <sam_ba_monitor_run+0x26>
			if (*ptr != 0xff)
    1232:	4dc2      	ldr	r5, [pc, #776]	; (153c <sam_ba_monitor_run+0x350>)
    1234:	e0d8      	b.n	13e8 <sam_ba_monitor_run+0x1fc>
					if (b_terminal_mode)
    1236:	4bc4      	ldr	r3, [pc, #784]	; (1548 <sam_ba_monitor_run+0x35c>)
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	2b00      	cmp	r3, #0
    123c:	d172      	bne.n	1324 <sam_ba_monitor_run+0x138>
					if (command == 'S')
    123e:	4bbc      	ldr	r3, [pc, #752]	; (1530 <sam_ba_monitor_run+0x344>)
    1240:	781b      	ldrb	r3, [r3, #0]
    1242:	2b53      	cmp	r3, #83	; 0x53
    1244:	d075      	beq.n	1332 <sam_ba_monitor_run+0x146>
					else if (command == 'R')
    1246:	2b52      	cmp	r3, #82	; 0x52
    1248:	d100      	bne.n	124c <sam_ba_monitor_run+0x60>
    124a:	e0e7      	b.n	141c <sam_ba_monitor_run+0x230>
					else if (command == 'O')
    124c:	2b4f      	cmp	r3, #79	; 0x4f
    124e:	d100      	bne.n	1252 <sam_ba_monitor_run+0x66>
    1250:	e0ed      	b.n	142e <sam_ba_monitor_run+0x242>
					else if (command == 'H')
    1252:	2b48      	cmp	r3, #72	; 0x48
    1254:	d100      	bne.n	1258 <sam_ba_monitor_run+0x6c>
    1256:	e0f0      	b.n	143a <sam_ba_monitor_run+0x24e>
					else if (command == 'W')
    1258:	2b57      	cmp	r3, #87	; 0x57
    125a:	d100      	bne.n	125e <sam_ba_monitor_run+0x72>
    125c:	e0f3      	b.n	1446 <sam_ba_monitor_run+0x25a>
					else if (command == 'o')
    125e:	2b6f      	cmp	r3, #111	; 0x6f
    1260:	d100      	bne.n	1264 <sam_ba_monitor_run+0x78>
    1262:	e0f6      	b.n	1452 <sam_ba_monitor_run+0x266>
					else if (command == 'h')
    1264:	2b68      	cmp	r3, #104	; 0x68
    1266:	d100      	bne.n	126a <sam_ba_monitor_run+0x7e>
    1268:	e0f9      	b.n	145e <sam_ba_monitor_run+0x272>
					else if (command == 'w')
    126a:	2b77      	cmp	r3, #119	; 0x77
    126c:	d100      	bne.n	1270 <sam_ba_monitor_run+0x84>
    126e:	e0ff      	b.n	1470 <sam_ba_monitor_run+0x284>
					else if (command == 'G')
    1270:	2b47      	cmp	r3, #71	; 0x47
    1272:	d100      	bne.n	1276 <sam_ba_monitor_run+0x8a>
    1274:	e105      	b.n	1482 <sam_ba_monitor_run+0x296>
					else if (command == 'T')
    1276:	2b54      	cmp	r3, #84	; 0x54
    1278:	d100      	bne.n	127c <sam_ba_monitor_run+0x90>
    127a:	e111      	b.n	14a0 <sam_ba_monitor_run+0x2b4>
					else if (command == 'N')
    127c:	2b4e      	cmp	r3, #78	; 0x4e
    127e:	d100      	bne.n	1282 <sam_ba_monitor_run+0x96>
    1280:	e118      	b.n	14b4 <sam_ba_monitor_run+0x2c8>
					else if (command == 'V')
    1282:	2b56      	cmp	r3, #86	; 0x56
    1284:	d000      	beq.n	1288 <sam_ba_monitor_run+0x9c>
    1286:	e098      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						ptr_monitor_if->putdata("v", 1);
    1288:	4bab      	ldr	r3, [pc, #684]	; (1538 <sam_ba_monitor_run+0x34c>)
    128a:	4699      	mov	r9, r3
    128c:	681b      	ldr	r3, [r3, #0]
    128e:	68db      	ldr	r3, [r3, #12]
    1290:	2101      	movs	r1, #1
    1292:	48ae      	ldr	r0, [pc, #696]	; (154c <sam_ba_monitor_run+0x360>)
    1294:	4798      	blx	r3
						ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
    1296:	464b      	mov	r3, r9
    1298:	681b      	ldr	r3, [r3, #0]
    129a:	68db      	ldr	r3, [r3, #12]
    129c:	2104      	movs	r1, #4
    129e:	48ac      	ldr	r0, [pc, #688]	; (1550 <sam_ba_monitor_run+0x364>)
    12a0:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    12a2:	464b      	mov	r3, r9
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	68db      	ldr	r3, [r3, #12]
    12a8:	2101      	movs	r1, #1
    12aa:	48aa      	ldr	r0, [pc, #680]	; (1554 <sam_ba_monitor_run+0x368>)
    12ac:	4798      	blx	r3
						i = 0;
    12ae:	2200      	movs	r2, #0
    12b0:	4ba4      	ldr	r3, [pc, #656]	; (1544 <sam_ba_monitor_run+0x358>)
    12b2:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    12b4:	4aa8      	ldr	r2, [pc, #672]	; (1558 <sam_ba_monitor_run+0x36c>)
    12b6:	4ba1      	ldr	r3, [pc, #644]	; (153c <sam_ba_monitor_run+0x350>)
    12b8:	601a      	str	r2, [r3, #0]
							i++;
    12ba:	48a2      	ldr	r0, [pc, #648]	; (1544 <sam_ba_monitor_run+0x358>)
						while (*ptr++ != '\0')
    12bc:	001a      	movs	r2, r3
							i++;
    12be:	6803      	ldr	r3, [r0, #0]
    12c0:	1c59      	adds	r1, r3, #1
    12c2:	6001      	str	r1, [r0, #0]
						while (*ptr++ != '\0')
    12c4:	6813      	ldr	r3, [r2, #0]
    12c6:	1c5e      	adds	r6, r3, #1
    12c8:	6016      	str	r6, [r2, #0]
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d1f6      	bne.n	12be <sam_ba_monitor_run+0xd2>
						ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
    12d0:	4b99      	ldr	r3, [pc, #612]	; (1538 <sam_ba_monitor_run+0x34c>)
    12d2:	4699      	mov	r9, r3
    12d4:	681b      	ldr	r3, [r3, #0]
    12d6:	68db      	ldr	r3, [r3, #12]
    12d8:	48a0      	ldr	r0, [pc, #640]	; (155c <sam_ba_monitor_run+0x370>)
    12da:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    12dc:	464b      	mov	r3, r9
    12de:	681b      	ldr	r3, [r3, #0]
    12e0:	68db      	ldr	r3, [r3, #12]
    12e2:	2101      	movs	r1, #1
    12e4:	489b      	ldr	r0, [pc, #620]	; (1554 <sam_ba_monitor_run+0x368>)
    12e6:	4798      	blx	r3
						i = 0;
    12e8:	2200      	movs	r2, #0
    12ea:	4b96      	ldr	r3, [pc, #600]	; (1544 <sam_ba_monitor_run+0x358>)
    12ec:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    12ee:	4a9c      	ldr	r2, [pc, #624]	; (1560 <sam_ba_monitor_run+0x374>)
    12f0:	4b92      	ldr	r3, [pc, #584]	; (153c <sam_ba_monitor_run+0x350>)
    12f2:	601a      	str	r2, [r3, #0]
							i++;
    12f4:	4893      	ldr	r0, [pc, #588]	; (1544 <sam_ba_monitor_run+0x358>)
						while (*ptr++ != '\0')
    12f6:	001a      	movs	r2, r3
							i++;
    12f8:	6803      	ldr	r3, [r0, #0]
    12fa:	1c59      	adds	r1, r3, #1
    12fc:	6001      	str	r1, [r0, #0]
						while (*ptr++ != '\0')
    12fe:	6813      	ldr	r3, [r2, #0]
    1300:	1c5e      	adds	r6, r3, #1
    1302:	6016      	str	r6, [r2, #0]
    1304:	781b      	ldrb	r3, [r3, #0]
    1306:	2b00      	cmp	r3, #0
    1308:	d1f6      	bne.n	12f8 <sam_ba_monitor_run+0x10c>
						ptr_monitor_if->putdata((uint8_t *) &(__TIME__), i);
    130a:	4b8b      	ldr	r3, [pc, #556]	; (1538 <sam_ba_monitor_run+0x34c>)
    130c:	4699      	mov	r9, r3
    130e:	681b      	ldr	r3, [r3, #0]
    1310:	68db      	ldr	r3, [r3, #12]
    1312:	4894      	ldr	r0, [pc, #592]	; (1564 <sam_ba_monitor_run+0x378>)
    1314:	4798      	blx	r3
						ptr_monitor_if->putdata("\n\r", 2);
    1316:	464b      	mov	r3, r9
    1318:	681b      	ldr	r3, [r3, #0]
    131a:	68db      	ldr	r3, [r3, #12]
    131c:	2102      	movs	r1, #2
    131e:	4892      	ldr	r0, [pc, #584]	; (1568 <sam_ba_monitor_run+0x37c>)
    1320:	4798      	blx	r3
    1322:	e04a      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						ptr_monitor_if->putdata("\n\r", 2);
    1324:	4b84      	ldr	r3, [pc, #528]	; (1538 <sam_ba_monitor_run+0x34c>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	68db      	ldr	r3, [r3, #12]
    132a:	2102      	movs	r1, #2
    132c:	488e      	ldr	r0, [pc, #568]	; (1568 <sam_ba_monitor_run+0x37c>)
    132e:	4798      	blx	r3
    1330:	e785      	b.n	123e <sam_ba_monitor_run+0x52>
						if(length>i)
    1332:	4b83      	ldr	r3, [pc, #524]	; (1540 <sam_ba_monitor_run+0x354>)
    1334:	681b      	ldr	r3, [r3, #0]
    1336:	4a83      	ldr	r2, [pc, #524]	; (1544 <sam_ba_monitor_run+0x358>)
    1338:	6812      	ldr	r2, [r2, #0]
    133a:	4293      	cmp	r3, r2
    133c:	d92e      	bls.n	139c <sam_ba_monitor_run+0x1b0>
							ptr++;
    133e:	487f      	ldr	r0, [pc, #508]	; (153c <sam_ba_monitor_run+0x350>)
    1340:	6801      	ldr	r1, [r0, #0]
    1342:	3101      	adds	r1, #1
    1344:	6001      	str	r1, [r0, #0]
							i++;
    1346:	3201      	adds	r2, #1
    1348:	497e      	ldr	r1, [pc, #504]	; (1544 <sam_ba_monitor_run+0x358>)
    134a:	600a      	str	r2, [r1, #0]
							u32tmp=min((length-i),current_number);
    134c:	4987      	ldr	r1, [pc, #540]	; (156c <sam_ba_monitor_run+0x380>)
    134e:	6809      	ldr	r1, [r1, #0]
    1350:	1a9b      	subs	r3, r3, r2
    1352:	428b      	cmp	r3, r1
    1354:	d900      	bls.n	1358 <sam_ba_monitor_run+0x16c>
    1356:	000b      	movs	r3, r1
    1358:	4a85      	ldr	r2, [pc, #532]	; (1570 <sam_ba_monitor_run+0x384>)
    135a:	6013      	str	r3, [r2, #0]
							for(j=0;j<u32tmp;j++)
    135c:	2100      	movs	r1, #0
    135e:	4a85      	ldr	r2, [pc, #532]	; (1574 <sam_ba_monitor_run+0x388>)
    1360:	7011      	strb	r1, [r2, #0]
    1362:	2b00      	cmp	r3, #0
    1364:	d01a      	beq.n	139c <sam_ba_monitor_run+0x1b0>
								*ptr_data = *ptr;
    1366:	4971      	ldr	r1, [pc, #452]	; (152c <sam_ba_monitor_run+0x340>)
    1368:	4a74      	ldr	r2, [pc, #464]	; (153c <sam_ba_monitor_run+0x350>)
								i++;
    136a:	4f76      	ldr	r7, [pc, #472]	; (1544 <sam_ba_monitor_run+0x358>)
							for(j=0;j<u32tmp;j++)
    136c:	4881      	ldr	r0, [pc, #516]	; (1574 <sam_ba_monitor_run+0x388>)
    136e:	4b80      	ldr	r3, [pc, #512]	; (1570 <sam_ba_monitor_run+0x384>)
    1370:	469c      	mov	ip, r3
								*ptr_data = *ptr;
    1372:	6813      	ldr	r3, [r2, #0]
    1374:	781b      	ldrb	r3, [r3, #0]
    1376:	680e      	ldr	r6, [r1, #0]
    1378:	7033      	strb	r3, [r6, #0]
								ptr_data++;
    137a:	680b      	ldr	r3, [r1, #0]
    137c:	3301      	adds	r3, #1
    137e:	600b      	str	r3, [r1, #0]
								ptr++;
    1380:	6813      	ldr	r3, [r2, #0]
    1382:	3301      	adds	r3, #1
    1384:	6013      	str	r3, [r2, #0]
								i++;
    1386:	683b      	ldr	r3, [r7, #0]
    1388:	3301      	adds	r3, #1
    138a:	603b      	str	r3, [r7, #0]
							for(j=0;j<u32tmp;j++)
    138c:	7803      	ldrb	r3, [r0, #0]
    138e:	3301      	adds	r3, #1
    1390:	b2db      	uxtb	r3, r3
    1392:	7003      	strb	r3, [r0, #0]
    1394:	4666      	mov	r6, ip
    1396:	6836      	ldr	r6, [r6, #0]
    1398:	42b3      	cmp	r3, r6
    139a:	d3ea      	bcc.n	1372 <sam_ba_monitor_run+0x186>
						i--;
    139c:	4a69      	ldr	r2, [pc, #420]	; (1544 <sam_ba_monitor_run+0x358>)
    139e:	6813      	ldr	r3, [r2, #0]
    13a0:	3b01      	subs	r3, #1
    13a2:	6013      	str	r3, [r2, #0]
						ptr--;
    13a4:	4a65      	ldr	r2, [pc, #404]	; (153c <sam_ba_monitor_run+0x350>)
    13a6:	6813      	ldr	r3, [r2, #0]
    13a8:	3b01      	subs	r3, #1
    13aa:	6013      	str	r3, [r2, #0]
						if(j<current_number)
    13ac:	4b71      	ldr	r3, [pc, #452]	; (1574 <sam_ba_monitor_run+0x388>)
    13ae:	781b      	ldrb	r3, [r3, #0]
    13b0:	4a6e      	ldr	r2, [pc, #440]	; (156c <sam_ba_monitor_run+0x380>)
    13b2:	6811      	ldr	r1, [r2, #0]
    13b4:	428b      	cmp	r3, r1
    13b6:	d329      	bcc.n	140c <sam_ba_monitor_run+0x220>
						__asm("nop");
    13b8:	46c0      	nop			; (mov r8, r8)
					command = 'z';
    13ba:	227a      	movs	r2, #122	; 0x7a
    13bc:	4b5c      	ldr	r3, [pc, #368]	; (1530 <sam_ba_monitor_run+0x344>)
    13be:	701a      	strb	r2, [r3, #0]
					current_number = 0;
    13c0:	2200      	movs	r2, #0
    13c2:	4b6a      	ldr	r3, [pc, #424]	; (156c <sam_ba_monitor_run+0x380>)
    13c4:	601a      	str	r2, [r3, #0]
					if (b_terminal_mode)
    13c6:	4b60      	ldr	r3, [pc, #384]	; (1548 <sam_ba_monitor_run+0x35c>)
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d000      	beq.n	13d0 <sam_ba_monitor_run+0x1e4>
    13ce:	e080      	b.n	14d2 <sam_ba_monitor_run+0x2e6>
				ptr++;
    13d0:	6823      	ldr	r3, [r4, #0]
    13d2:	3301      	adds	r3, #1
    13d4:	6023      	str	r3, [r4, #0]
		for (i = 0; i < length; i++)
    13d6:	4a5b      	ldr	r2, [pc, #364]	; (1544 <sam_ba_monitor_run+0x358>)
    13d8:	6813      	ldr	r3, [r2, #0]
    13da:	3301      	adds	r3, #1
    13dc:	6013      	str	r3, [r2, #0]
    13de:	4a58      	ldr	r2, [pc, #352]	; (1540 <sam_ba_monitor_run+0x354>)
    13e0:	6812      	ldr	r2, [r2, #0]
    13e2:	429a      	cmp	r2, r3
    13e4:	d800      	bhi.n	13e8 <sam_ba_monitor_run+0x1fc>
    13e6:	e714      	b.n	1212 <sam_ba_monitor_run+0x26>
			if (*ptr != 0xff)
    13e8:	682b      	ldr	r3, [r5, #0]
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	2bff      	cmp	r3, #255	; 0xff
    13ee:	d0f2      	beq.n	13d6 <sam_ba_monitor_run+0x1ea>
				if (*ptr == '#')
    13f0:	2b23      	cmp	r3, #35	; 0x23
    13f2:	d100      	bne.n	13f6 <sam_ba_monitor_run+0x20a>
    13f4:	e71f      	b.n	1236 <sam_ba_monitor_run+0x4a>
					if (('0' <= *ptr) && (*ptr <= '9'))
    13f6:	001a      	movs	r2, r3
    13f8:	3a30      	subs	r2, #48	; 0x30
    13fa:	2a09      	cmp	r2, #9
    13fc:	d870      	bhi.n	14e0 <sam_ba_monitor_run+0x2f4>
						current_number = (current_number << 4) | (*ptr - '0');
    13fe:	495b      	ldr	r1, [pc, #364]	; (156c <sam_ba_monitor_run+0x380>)
    1400:	680a      	ldr	r2, [r1, #0]
    1402:	0112      	lsls	r2, r2, #4
    1404:	3b30      	subs	r3, #48	; 0x30
    1406:	4313      	orrs	r3, r2
    1408:	600b      	str	r3, [r1, #0]
    140a:	e7e1      	b.n	13d0 <sam_ba_monitor_run+0x1e4>
							ptr_monitor_if->getdata_xmd(ptr_data, current_number-j);
    140c:	1ac9      	subs	r1, r1, r3
    140e:	4b47      	ldr	r3, [pc, #284]	; (152c <sam_ba_monitor_run+0x340>)
    1410:	6818      	ldr	r0, [r3, #0]
    1412:	4b49      	ldr	r3, [pc, #292]	; (1538 <sam_ba_monitor_run+0x34c>)
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	699b      	ldr	r3, [r3, #24]
    1418:	4798      	blx	r3
    141a:	e7cd      	b.n	13b8 <sam_ba_monitor_run+0x1cc>
						ptr_monitor_if->putdata_xmd(ptr_data, current_number);
    141c:	4b53      	ldr	r3, [pc, #332]	; (156c <sam_ba_monitor_run+0x380>)
    141e:	6819      	ldr	r1, [r3, #0]
    1420:	4b42      	ldr	r3, [pc, #264]	; (152c <sam_ba_monitor_run+0x340>)
    1422:	6818      	ldr	r0, [r3, #0]
    1424:	4b44      	ldr	r3, [pc, #272]	; (1538 <sam_ba_monitor_run+0x34c>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	695b      	ldr	r3, [r3, #20]
    142a:	4798      	blx	r3
    142c:	e7c5      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						*ptr_data = (char) current_number;
    142e:	4b3f      	ldr	r3, [pc, #252]	; (152c <sam_ba_monitor_run+0x340>)
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	4a4e      	ldr	r2, [pc, #312]	; (156c <sam_ba_monitor_run+0x380>)
    1434:	6812      	ldr	r2, [r2, #0]
    1436:	701a      	strb	r2, [r3, #0]
    1438:	e7bf      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						*((uint16_t *) ptr_data) = (uint16_t) current_number;
    143a:	4b3c      	ldr	r3, [pc, #240]	; (152c <sam_ba_monitor_run+0x340>)
    143c:	681b      	ldr	r3, [r3, #0]
    143e:	4a4b      	ldr	r2, [pc, #300]	; (156c <sam_ba_monitor_run+0x380>)
    1440:	6812      	ldr	r2, [r2, #0]
    1442:	801a      	strh	r2, [r3, #0]
    1444:	e7b9      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						*((int *) ptr_data) = current_number;
    1446:	4b39      	ldr	r3, [pc, #228]	; (152c <sam_ba_monitor_run+0x340>)
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	4a48      	ldr	r2, [pc, #288]	; (156c <sam_ba_monitor_run+0x380>)
    144c:	6812      	ldr	r2, [r2, #0]
    144e:	601a      	str	r2, [r3, #0]
    1450:	e7b3      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						sam_ba_putdata_term(ptr_data, 1);
    1452:	4b36      	ldr	r3, [pc, #216]	; (152c <sam_ba_monitor_run+0x340>)
    1454:	6818      	ldr	r0, [r3, #0]
    1456:	2101      	movs	r1, #1
    1458:	4b47      	ldr	r3, [pc, #284]	; (1578 <sam_ba_monitor_run+0x38c>)
    145a:	4798      	blx	r3
    145c:	e7ad      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						current_number = *((uint16_t *) ptr_data);
    145e:	4843      	ldr	r0, [pc, #268]	; (156c <sam_ba_monitor_run+0x380>)
    1460:	4b32      	ldr	r3, [pc, #200]	; (152c <sam_ba_monitor_run+0x340>)
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	881b      	ldrh	r3, [r3, #0]
    1466:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 2);
    1468:	2102      	movs	r1, #2
    146a:	4b43      	ldr	r3, [pc, #268]	; (1578 <sam_ba_monitor_run+0x38c>)
    146c:	4798      	blx	r3
    146e:	e7a4      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						current_number = *((uint32_t *) ptr_data);
    1470:	4b2e      	ldr	r3, [pc, #184]	; (152c <sam_ba_monitor_run+0x340>)
    1472:	681b      	ldr	r3, [r3, #0]
    1474:	681b      	ldr	r3, [r3, #0]
    1476:	483d      	ldr	r0, [pc, #244]	; (156c <sam_ba_monitor_run+0x380>)
    1478:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 4);
    147a:	2104      	movs	r1, #4
    147c:	4b3e      	ldr	r3, [pc, #248]	; (1578 <sam_ba_monitor_run+0x38c>)
    147e:	4798      	blx	r3
    1480:	e79b      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						call_applet(current_number);
    1482:	4b3a      	ldr	r3, [pc, #232]	; (156c <sam_ba_monitor_run+0x380>)
    1484:	6818      	ldr	r0, [r3, #0]
    1486:	4b3d      	ldr	r3, [pc, #244]	; (157c <sam_ba_monitor_run+0x390>)
    1488:	4798      	blx	r3
						__set_MSP(sp);
    148a:	4b3d      	ldr	r3, [pc, #244]	; (1580 <sam_ba_monitor_run+0x394>)
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	f383 8808 	msr	MSP, r3
						cpu_irq_enable();
    1492:	2201      	movs	r2, #1
    1494:	4b3b      	ldr	r3, [pc, #236]	; (1584 <sam_ba_monitor_run+0x398>)
    1496:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1498:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    149c:	b662      	cpsie	i
    149e:	e78c      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						b_terminal_mode = 1;
    14a0:	2201      	movs	r2, #1
    14a2:	4b29      	ldr	r3, [pc, #164]	; (1548 <sam_ba_monitor_run+0x35c>)
    14a4:	701a      	strb	r2, [r3, #0]
						ptr_monitor_if->putdata("\n\r", 2);
    14a6:	4b24      	ldr	r3, [pc, #144]	; (1538 <sam_ba_monitor_run+0x34c>)
    14a8:	681b      	ldr	r3, [r3, #0]
    14aa:	68db      	ldr	r3, [r3, #12]
    14ac:	2102      	movs	r1, #2
    14ae:	482e      	ldr	r0, [pc, #184]	; (1568 <sam_ba_monitor_run+0x37c>)
    14b0:	4798      	blx	r3
    14b2:	e782      	b.n	13ba <sam_ba_monitor_run+0x1ce>
						if (b_terminal_mode == 0)
    14b4:	4b24      	ldr	r3, [pc, #144]	; (1548 <sam_ba_monitor_run+0x35c>)
    14b6:	781b      	ldrb	r3, [r3, #0]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d003      	beq.n	14c4 <sam_ba_monitor_run+0x2d8>
						b_terminal_mode = 0;
    14bc:	2200      	movs	r2, #0
    14be:	4b22      	ldr	r3, [pc, #136]	; (1548 <sam_ba_monitor_run+0x35c>)
    14c0:	701a      	strb	r2, [r3, #0]
    14c2:	e77a      	b.n	13ba <sam_ba_monitor_run+0x1ce>
							ptr_monitor_if->putdata("\n\r", 2);
    14c4:	4b1c      	ldr	r3, [pc, #112]	; (1538 <sam_ba_monitor_run+0x34c>)
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	68db      	ldr	r3, [r3, #12]
    14ca:	2102      	movs	r1, #2
    14cc:	4826      	ldr	r0, [pc, #152]	; (1568 <sam_ba_monitor_run+0x37c>)
    14ce:	4798      	blx	r3
    14d0:	e7f4      	b.n	14bc <sam_ba_monitor_run+0x2d0>
						ptr_monitor_if->putdata(">", 1);
    14d2:	4b19      	ldr	r3, [pc, #100]	; (1538 <sam_ba_monitor_run+0x34c>)
    14d4:	681b      	ldr	r3, [r3, #0]
    14d6:	68db      	ldr	r3, [r3, #12]
    14d8:	2101      	movs	r1, #1
    14da:	482b      	ldr	r0, [pc, #172]	; (1588 <sam_ba_monitor_run+0x39c>)
    14dc:	4798      	blx	r3
    14de:	e777      	b.n	13d0 <sam_ba_monitor_run+0x1e4>
					else if (('A' <= *ptr) && (*ptr <= 'F'))
    14e0:	001a      	movs	r2, r3
    14e2:	3a41      	subs	r2, #65	; 0x41
    14e4:	2a05      	cmp	r2, #5
    14e6:	d806      	bhi.n	14f6 <sam_ba_monitor_run+0x30a>
						current_number = (current_number << 4)
    14e8:	4920      	ldr	r1, [pc, #128]	; (156c <sam_ba_monitor_run+0x380>)
    14ea:	680a      	ldr	r2, [r1, #0]
    14ec:	0112      	lsls	r2, r2, #4
								| (*ptr - 'A' + 0xa);
    14ee:	3b37      	subs	r3, #55	; 0x37
    14f0:	4313      	orrs	r3, r2
						current_number = (current_number << 4)
    14f2:	600b      	str	r3, [r1, #0]
    14f4:	e76c      	b.n	13d0 <sam_ba_monitor_run+0x1e4>
					else if (('a' <= *ptr) && (*ptr <= 'f'))
    14f6:	001a      	movs	r2, r3
    14f8:	3a61      	subs	r2, #97	; 0x61
    14fa:	2a05      	cmp	r2, #5
    14fc:	d806      	bhi.n	150c <sam_ba_monitor_run+0x320>
						current_number = (current_number << 4)
    14fe:	491b      	ldr	r1, [pc, #108]	; (156c <sam_ba_monitor_run+0x380>)
    1500:	680a      	ldr	r2, [r1, #0]
    1502:	0112      	lsls	r2, r2, #4
								| (*ptr - 'a' + 0xa);
    1504:	3b57      	subs	r3, #87	; 0x57
    1506:	4313      	orrs	r3, r2
						current_number = (current_number << 4)
    1508:	600b      	str	r3, [r1, #0]
    150a:	e761      	b.n	13d0 <sam_ba_monitor_run+0x1e4>
					else if (*ptr == ',')
    150c:	2b2c      	cmp	r3, #44	; 0x2c
    150e:	d005      	beq.n	151c <sam_ba_monitor_run+0x330>
						command = *ptr;
    1510:	4642      	mov	r2, r8
    1512:	7013      	strb	r3, [r2, #0]
						current_number = 0;
    1514:	2200      	movs	r2, #0
    1516:	4b15      	ldr	r3, [pc, #84]	; (156c <sam_ba_monitor_run+0x380>)
    1518:	601a      	str	r2, [r3, #0]
    151a:	e759      	b.n	13d0 <sam_ba_monitor_run+0x1e4>
						ptr_data = (uint8_t *) current_number;
    151c:	4b13      	ldr	r3, [pc, #76]	; (156c <sam_ba_monitor_run+0x380>)
    151e:	4a03      	ldr	r2, [pc, #12]	; (152c <sam_ba_monitor_run+0x340>)
    1520:	6819      	ldr	r1, [r3, #0]
    1522:	6011      	str	r1, [r2, #0]
						current_number = 0;
    1524:	2200      	movs	r2, #0
    1526:	601a      	str	r2, [r3, #0]
    1528:	e752      	b.n	13d0 <sam_ba_monitor_run+0x1e4>
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	200000c0 	.word	0x200000c0
    1530:	20000078 	.word	0x20000078
    1534:	20000080 	.word	0x20000080
    1538:	200000c4 	.word	0x200000c4
    153c:	20000074 	.word	0x20000074
    1540:	20000070 	.word	0x20000070
    1544:	2000007c 	.word	0x2000007c
    1548:	20000050 	.word	0x20000050
    154c:	00001ce8 	.word	0x00001ce8
    1550:	00001cdc 	.word	0x00001cdc
    1554:	00001cec 	.word	0x00001cec
    1558:	00001cf1 	.word	0x00001cf1
    155c:	00001cf0 	.word	0x00001cf0
    1560:	00001cfd 	.word	0x00001cfd
    1564:	00001cfc 	.word	0x00001cfc
    1568:	00001ce4 	.word	0x00001ce4
    156c:	200000cc 	.word	0x200000cc
    1570:	200000d0 	.word	0x200000d0
    1574:	2000006c 	.word	0x2000006c
    1578:	00001139 	.word	0x00001139
    157c:	000011c5 	.word	0x000011c5
    1580:	200000c8 	.word	0x200000c8
    1584:	20000000 	.word	0x20000000
    1588:	00001d08 	.word	0x00001d08

0000158c <usart_open>:

/**
 * \brief Open the given USART
 */
void usart_open()
{
    158c:	b530      	push	{r4, r5, lr}
    158e:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1590:	2380      	movs	r3, #128	; 0x80
    1592:	05db      	lsls	r3, r3, #23
    1594:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1596:	2300      	movs	r3, #0
    1598:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    159a:	22ff      	movs	r2, #255	; 0xff
    159c:	4669      	mov	r1, sp
    159e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    15a0:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    15a2:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    15a4:	2201      	movs	r2, #1
    15a6:	212c      	movs	r1, #44	; 0x2c
    15a8:	4668      	mov	r0, sp
    15aa:	5442      	strb	r2, [r0, r1]
	config->transmitter_enable = true;
    15ac:	3101      	adds	r1, #1
    15ae:	5442      	strb	r2, [r0, r1]
	config->clock_polarity_inverted = false;
    15b0:	322d      	adds	r2, #45	; 0x2d
    15b2:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    15b4:	3201      	adds	r2, #1
    15b6:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    15b8:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    15ba:	3205      	adds	r2, #5
    15bc:	5483      	strb	r3, [r0, r2]
	config->generator_source = GCLK_GENERATOR_0;
    15be:	3201      	adds	r2, #1
    15c0:	5483      	strb	r3, [r0, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    15c2:	930e      	str	r3, [sp, #56]	; 0x38
	config->pinmux_pad1      = PINMUX_DEFAULT;
    15c4:	930f      	str	r3, [sp, #60]	; 0x3c
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    15c6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    15c8:	2200      	movs	r2, #0
    15ca:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    15cc:	76c2      	strb	r2, [r0, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    15ce:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    15d0:	8403      	strh	r3, [r0, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    15d2:	8443      	strh	r3, [r0, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    15d4:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    15d6:	2324      	movs	r3, #36	; 0x24
    15d8:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    15da:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    15dc:	2313      	movs	r3, #19
    15de:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    15e0:	3313      	adds	r3, #19
    15e2:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    15e4:	3b01      	subs	r3, #1
    15e6:	54c2      	strb	r2, [r0, r3]
	struct usart_config config;

	usart_get_config_defaults(&config);

	config.baudrate     = BOOT_USART_BAUDRATE;
    15e8:	23e1      	movs	r3, #225	; 0xe1
    15ea:	025b      	lsls	r3, r3, #9
    15ec:	930a      	str	r3, [sp, #40]	; 0x28
	config.mux_setting  = BOOT_USART_MUX_SETTINGS;
    15ee:	23c4      	movs	r3, #196	; 0xc4
    15f0:	039b      	lsls	r3, r3, #14
    15f2:	9303      	str	r3, [sp, #12]
#endif
#ifdef BOOT_USART_PAD1
	config.pinmux_pad1  = BOOT_USART_PAD1;
#endif
#ifdef BOOT_USART_PAD2
	config.pinmux_pad2  = BOOT_USART_PAD2;
    15f4:	4b25      	ldr	r3, [pc, #148]	; (168c <usart_open+0x100>)
    15f6:	9310      	str	r3, [sp, #64]	; 0x40
#endif
#ifdef BOOT_USART_PAD3
	config.pinmux_pad3  = BOOT_USART_PAD3;
    15f8:	4b25      	ldr	r3, [pc, #148]	; (1690 <usart_open+0x104>)
    15fa:	9311      	str	r3, [sp, #68]	; 0x44
#endif
	config.generator_source = BOOT_USART_GCLK_SOURCE;

	while (usart_init(&usart_sam_ba, BOOT_USART_MODULE, &config)
    15fc:	4d25      	ldr	r5, [pc, #148]	; (1694 <usart_open+0x108>)
    15fe:	4c26      	ldr	r4, [pc, #152]	; (1698 <usart_open+0x10c>)
    1600:	466a      	mov	r2, sp
    1602:	4926      	ldr	r1, [pc, #152]	; (169c <usart_open+0x110>)
    1604:	0028      	movs	r0, r5
    1606:	47a0      	blx	r4
    1608:	2800      	cmp	r0, #0
    160a:	d1f9      	bne.n	1600 <usart_open+0x74>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    160c:	4d21      	ldr	r5, [pc, #132]	; (1694 <usart_open+0x108>)
    160e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1610:	0020      	movs	r0, r4
    1612:	4b23      	ldr	r3, [pc, #140]	; (16a0 <usart_open+0x114>)
    1614:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1616:	231f      	movs	r3, #31
    1618:	4018      	ands	r0, r3
    161a:	3b1e      	subs	r3, #30
    161c:	4083      	lsls	r3, r0
    161e:	4a21      	ldr	r2, [pc, #132]	; (16a4 <usart_open+0x118>)
    1620:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1622:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1624:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1626:	2b00      	cmp	r3, #0
    1628:	d1fc      	bne.n	1624 <usart_open+0x98>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    162a:	6823      	ldr	r3, [r4, #0]
    162c:	2202      	movs	r2, #2
    162e:	4313      	orrs	r3, r2
    1630:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1632:	4b18      	ldr	r3, [pc, #96]	; (1694 <usart_open+0x108>)
    1634:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1636:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1638:	2a00      	cmp	r2, #0
    163a:	d1fc      	bne.n	1636 <usart_open+0xaa>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    163c:	6859      	ldr	r1, [r3, #4]
    163e:	2280      	movs	r2, #128	; 0x80
    1640:	0252      	lsls	r2, r2, #9
    1642:	430a      	orrs	r2, r1
    1644:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1646:	2101      	movs	r1, #1
    1648:	4a12      	ldr	r2, [pc, #72]	; (1694 <usart_open+0x108>)
    164a:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    164c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    164e:	2a00      	cmp	r2, #0
    1650:	d1fc      	bne.n	164c <usart_open+0xc0>
	return (usart_hw->SYNCBUSY.reg);
    1652:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1654:	2a00      	cmp	r2, #0
    1656:	d1fc      	bne.n	1652 <usart_open+0xc6>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    1658:	6859      	ldr	r1, [r3, #4]
    165a:	2280      	movs	r2, #128	; 0x80
    165c:	0292      	lsls	r2, r2, #10
    165e:	430a      	orrs	r2, r1
    1660:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    1662:	2101      	movs	r1, #1
    1664:	4a0b      	ldr	r2, [pc, #44]	; (1694 <usart_open+0x108>)
    1666:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    1668:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    166a:	2a00      	cmp	r2, #0
    166c:	d1fc      	bne.n	1668 <usart_open+0xdc>

	usart_enable(&usart_sam_ba);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_RX);
	//Initialize flag
	b_sharp_received = false;
    166e:	2300      	movs	r3, #0
    1670:	4a0d      	ldr	r2, [pc, #52]	; (16a8 <usart_open+0x11c>)
    1672:	7013      	strb	r3, [r2, #0]
	idx_rx_read = 0;
    1674:	4a0d      	ldr	r2, [pc, #52]	; (16ac <usart_open+0x120>)
    1676:	7013      	strb	r3, [r2, #0]
	idx_rx_write = 0;
    1678:	4a0d      	ldr	r2, [pc, #52]	; (16b0 <usart_open+0x124>)
    167a:	7013      	strb	r3, [r2, #0]
	idx_tx_read = 0;
    167c:	4a0d      	ldr	r2, [pc, #52]	; (16b4 <usart_open+0x128>)
    167e:	7013      	strb	r3, [r2, #0]
	idx_tx_write = 0;
    1680:	4a0d      	ldr	r2, [pc, #52]	; (16b8 <usart_open+0x12c>)
    1682:	7013      	strb	r3, [r2, #0]

	error_timeout = 0;
    1684:	4a0d      	ldr	r2, [pc, #52]	; (16bc <usart_open+0x130>)
    1686:	7013      	strb	r3, [r2, #0]
}
    1688:	b013      	add	sp, #76	; 0x4c
    168a:	bd30      	pop	{r4, r5, pc}
    168c:	002a0003 	.word	0x002a0003
    1690:	002b0003 	.word	0x002b0003
    1694:	200000dc 	.word	0x200000dc
    1698:	0000062d 	.word	0x0000062d
    169c:	42001400 	.word	0x42001400
    16a0:	0000059d 	.word	0x0000059d
    16a4:	e000e100 	.word	0xe000e100
    16a8:	200000d4 	.word	0x200000d4
    16ac:	20000192 	.word	0x20000192
    16b0:	200000d5 	.word	0x200000d5
    16b4:	200000d8 	.word	0x200000d8
    16b8:	20000193 	.word	0x20000193
    16bc:	20000190 	.word	0x20000190

000016c0 <usart_putc>:
 * \param value Value to put
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
int usart_putc(int value)
{
    16c0:	b510      	push	{r4, lr}
	usart_write_wait(&usart_sam_ba, (uint16_t)value);
    16c2:	b281      	uxth	r1, r0
    16c4:	4802      	ldr	r0, [pc, #8]	; (16d0 <usart_putc+0x10>)
    16c6:	4b03      	ldr	r3, [pc, #12]	; (16d4 <usart_putc+0x14>)
    16c8:	4798      	blx	r3
	return 1;
}
    16ca:	2001      	movs	r0, #1
    16cc:	bd10      	pop	{r4, pc}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	200000dc 	.word	0x200000dc
    16d4:	000009d9 	.word	0x000009d9

000016d8 <usart_is_rx_ready>:
	}
	return (false);
}

bool usart_is_rx_ready(void) {
	return (BOOT_USART_MODULE->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC);
    16d8:	4b02      	ldr	r3, [pc, #8]	; (16e4 <usart_is_rx_ready+0xc>)
    16da:	7e18      	ldrb	r0, [r3, #24]
    16dc:	0740      	lsls	r0, r0, #29
    16de:	0fc0      	lsrs	r0, r0, #31
}
    16e0:	4770      	bx	lr
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	42001400 	.word	0x42001400

000016e8 <usart_getc>:
int usart_getc(void) {
    16e8:	b510      	push	{r4, lr}
    16ea:	b082      	sub	sp, #8
	while(!(usart_is_rx_ready()));
    16ec:	4c06      	ldr	r4, [pc, #24]	; (1708 <usart_getc+0x20>)
    16ee:	47a0      	blx	r4
    16f0:	2800      	cmp	r0, #0
    16f2:	d0fc      	beq.n	16ee <usart_getc+0x6>
	usart_read_wait(&usart_sam_ba, &retval);
    16f4:	466b      	mov	r3, sp
    16f6:	1d9c      	adds	r4, r3, #6
    16f8:	0021      	movs	r1, r4
    16fa:	4804      	ldr	r0, [pc, #16]	; (170c <usart_getc+0x24>)
    16fc:	4b04      	ldr	r3, [pc, #16]	; (1710 <usart_getc+0x28>)
    16fe:	4798      	blx	r3
	return (int)retval;
    1700:	8820      	ldrh	r0, [r4, #0]
}
    1702:	b002      	add	sp, #8
    1704:	bd10      	pop	{r4, pc}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	000016d9 	.word	0x000016d9
    170c:	200000dc 	.word	0x200000dc
    1710:	000009ff 	.word	0x000009ff

00001714 <usart_sharp_received>:
int usart_sharp_received(void) {
    1714:	b510      	push	{r4, lr}
	if (usart_is_rx_ready()) {
    1716:	4b06      	ldr	r3, [pc, #24]	; (1730 <usart_sharp_received+0x1c>)
    1718:	4798      	blx	r3
	return (false);
    171a:	2300      	movs	r3, #0
	if (usart_is_rx_ready()) {
    171c:	2800      	cmp	r0, #0
    171e:	d101      	bne.n	1724 <usart_sharp_received+0x10>
}
    1720:	0018      	movs	r0, r3
    1722:	bd10      	pop	{r4, pc}
		if (usart_getc() == SHARP_CHARACTER)
    1724:	4b03      	ldr	r3, [pc, #12]	; (1734 <usart_sharp_received+0x20>)
    1726:	4798      	blx	r3
    1728:	3823      	subs	r0, #35	; 0x23
			return (true);
    172a:	4243      	negs	r3, r0
    172c:	4143      	adcs	r3, r0
    172e:	e7f7      	b.n	1720 <usart_sharp_received+0xc>
    1730:	000016d9 	.word	0x000016d9
    1734:	000016e9 	.word	0x000016e9

00001738 <usart_putdata>:
}

/**
 * \brief Send given data (polling)
 */
uint32_t usart_putdata(void const* data, uint32_t length) {
    1738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    173a:	1e0f      	subs	r7, r1, #0
	uint32_t i;
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	for (i = 0; i < length; i++) {
    173c:	d007      	beq.n	174e <usart_putdata+0x16>
    173e:	1846      	adds	r6, r0, r1
    1740:	0004      	movs	r4, r0
		usart_putc(*ptrdata);
    1742:	4d04      	ldr	r5, [pc, #16]	; (1754 <usart_putdata+0x1c>)
    1744:	7820      	ldrb	r0, [r4, #0]
    1746:	47a8      	blx	r5
		ptrdata++;
    1748:	3401      	adds	r4, #1
	for (i = 0; i < length; i++) {
    174a:	42a6      	cmp	r6, r4
    174c:	d1fa      	bne.n	1744 <usart_putdata+0xc>
	}
	return (i);
}
    174e:	0038      	movs	r0, r7
    1750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	000016c1 	.word	0x000016c1

00001758 <usart_getdata>:

/**
 * \brief Get data from com device
 */
uint32_t usart_getdata(void* data, uint32_t length) {
    1758:	b510      	push	{r4, lr}
    175a:	0004      	movs	r4, r0
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	*ptrdata = usart_getc();
    175c:	4b02      	ldr	r3, [pc, #8]	; (1768 <usart_getdata+0x10>)
    175e:	4798      	blx	r3
    1760:	7020      	strb	r0, [r4, #0]
	return (1);
}
    1762:	2001      	movs	r0, #1
    1764:	bd10      	pop	{r4, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	000016e9 	.word	0x000016e9

0000176c <add_crc>:
 */
unsigned short add_crc(char ptr, unsigned short crc) {

	unsigned short cmpt;

	crc = crc ^ (int) ptr << 8;
    176c:	0200      	lsls	r0, r0, #8
    176e:	4048      	eors	r0, r1
    1770:	2308      	movs	r3, #8

	for (cmpt = 0; cmpt < 8; cmpt++) {
		if (crc & 0x8000)
			crc = crc << 1 ^ CRC16POLY;
    1772:	4908      	ldr	r1, [pc, #32]	; (1794 <add_crc+0x28>)
    1774:	e006      	b.n	1784 <add_crc+0x18>
    1776:	0040      	lsls	r0, r0, #1
    1778:	4048      	eors	r0, r1
    177a:	b280      	uxth	r0, r0
    177c:	3b01      	subs	r3, #1
    177e:	b29b      	uxth	r3, r3
	for (cmpt = 0; cmpt < 8; cmpt++) {
    1780:	2b00      	cmp	r3, #0
    1782:	d005      	beq.n	1790 <add_crc+0x24>
		if (crc & 0x8000)
    1784:	b202      	sxth	r2, r0
    1786:	2a00      	cmp	r2, #0
    1788:	dbf5      	blt.n	1776 <add_crc+0xa>
		else
			crc = crc << 1;
    178a:	0040      	lsls	r0, r0, #1
    178c:	b280      	uxth	r0, r0
    178e:	e7f5      	b.n	177c <add_crc+0x10>
	}

	return (crc & 0xFFFF);
}
    1790:	4770      	bx	lr
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	00001021 	.word	0x00001021

00001798 <getbytes>:

static uint16_t getbytes(uint8_t *ptr_data, uint16_t length) {
    1798:	b5f0      	push	{r4, r5, r6, r7, lr}
    179a:	46de      	mov	lr, fp
    179c:	4657      	mov	r7, sl
    179e:	464e      	mov	r6, r9
    17a0:	b5c0      	push	{r6, r7, lr}
    17a2:	b082      	sub	sp, #8
    17a4:	0007      	movs	r7, r0
    17a6:	1e0e      	subs	r6, r1, #0
	uint16_t crc = 0;
	uint16_t cpt;
	uint8_t c;

	for (cpt = 0; cpt < length; ++cpt) {
    17a8:	d02a      	beq.n	1800 <getbytes+0x68>
    17aa:	2400      	movs	r4, #0
    17ac:	2300      	movs	r3, #0
    17ae:	9301      	str	r3, [sp, #4]
		c = usart_getc();
    17b0:	4b19      	ldr	r3, [pc, #100]	; (1818 <getbytes+0x80>)
    17b2:	469a      	mov	sl, r3
		if (error_timeout)
    17b4:	4b19      	ldr	r3, [pc, #100]	; (181c <getbytes+0x84>)
    17b6:	4699      	mov	r9, r3
			return 1;
		crc = add_crc(c, crc);
    17b8:	4b19      	ldr	r3, [pc, #100]	; (1820 <getbytes+0x88>)
    17ba:	469b      	mov	fp, r3
    17bc:	e008      	b.n	17d0 <getbytes+0x38>
		//crc = (crc << 8) ^ xcrc16tab[(crc>>8) ^ c];
		if (size_of_data || mode_of_transfer) {
			*ptr_data++ = c;
    17be:	1c7b      	adds	r3, r7, #1
    17c0:	703d      	strb	r5, [r7, #0]
    17c2:	001f      	movs	r7, r3
			if (length == PKTLEN_128)
    17c4:	2e80      	cmp	r6, #128	; 0x80
    17c6:	d016      	beq.n	17f6 <getbytes+0x5e>
	for (cpt = 0; cpt < length; ++cpt) {
    17c8:	3401      	adds	r4, #1
    17ca:	b2a4      	uxth	r4, r4
    17cc:	42a6      	cmp	r6, r4
    17ce:	d01b      	beq.n	1808 <getbytes+0x70>
		c = usart_getc();
    17d0:	47d0      	blx	sl
    17d2:	b2c5      	uxtb	r5, r0
		if (error_timeout)
    17d4:	464b      	mov	r3, r9
    17d6:	781b      	ldrb	r3, [r3, #0]
    17d8:	2b00      	cmp	r3, #0
    17da:	d113      	bne.n	1804 <getbytes+0x6c>
		crc = add_crc(c, crc);
    17dc:	9901      	ldr	r1, [sp, #4]
    17de:	0028      	movs	r0, r5
    17e0:	47d8      	blx	fp
    17e2:	9001      	str	r0, [sp, #4]
		if (size_of_data || mode_of_transfer) {
    17e4:	4b0f      	ldr	r3, [pc, #60]	; (1824 <getbytes+0x8c>)
    17e6:	881b      	ldrh	r3, [r3, #0]
    17e8:	2b00      	cmp	r3, #0
    17ea:	d1e8      	bne.n	17be <getbytes+0x26>
    17ec:	4b0e      	ldr	r3, [pc, #56]	; (1828 <getbytes+0x90>)
    17ee:	781b      	ldrb	r3, [r3, #0]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d0e9      	beq.n	17c8 <getbytes+0x30>
    17f4:	e7e3      	b.n	17be <getbytes+0x26>
				size_of_data--;
    17f6:	490b      	ldr	r1, [pc, #44]	; (1824 <getbytes+0x8c>)
    17f8:	880a      	ldrh	r2, [r1, #0]
    17fa:	3a01      	subs	r2, #1
    17fc:	800a      	strh	r2, [r1, #0]
    17fe:	e7e3      	b.n	17c8 <getbytes+0x30>
	uint16_t crc = 0;
    1800:	9101      	str	r1, [sp, #4]
    1802:	e001      	b.n	1808 <getbytes+0x70>
			return 1;
    1804:	2301      	movs	r3, #1
    1806:	9301      	str	r3, [sp, #4]
		}
	}

	return crc;
}
    1808:	9801      	ldr	r0, [sp, #4]
    180a:	b002      	add	sp, #8
    180c:	bc1c      	pop	{r2, r3, r4}
    180e:	4691      	mov	r9, r2
    1810:	469a      	mov	sl, r3
    1812:	46a3      	mov	fp, r4
    1814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	000016e9 	.word	0x000016e9
    181c:	20000190 	.word	0x20000190
    1820:	0000176d 	.word	0x0000176d
    1824:	200000d6 	.word	0x200000d6
    1828:	20000191 	.word	0x20000191

0000182c <getPacket>:
}

/**
 * \brief Used by Xdown to retrieve packets.
 */
uint8_t getPacket(uint8_t *ptr_data, uint8_t sno) {
    182c:	b5f0      	push	{r4, r5, r6, r7, lr}
    182e:	b085      	sub	sp, #20
    1830:	0005      	movs	r5, r0
    1832:	9101      	str	r1, [sp, #4]
	uint8_t seq[2];
	uint16_t crc, xcrc;

	getbytes(seq, 2);
    1834:	2102      	movs	r1, #2
    1836:	a803      	add	r0, sp, #12
    1838:	4c17      	ldr	r4, [pc, #92]	; (1898 <getPacket+0x6c>)
    183a:	47a0      	blx	r4
	xcrc = getbytes(ptr_data, PKTLEN_128);
    183c:	2180      	movs	r1, #128	; 0x80
    183e:	0028      	movs	r0, r5
    1840:	47a0      	blx	r4
    1842:	0005      	movs	r5, r0
	if (error_timeout)
    1844:	4b15      	ldr	r3, [pc, #84]	; (189c <getPacket+0x70>)
    1846:	781f      	ldrb	r7, [r3, #0]
    1848:	2f00      	cmp	r7, #0
    184a:	d003      	beq.n	1854 <getPacket+0x28>
		return (false);
    184c:	2700      	movs	r7, #0
		return (false);
	}

	usart_putc(ACK);
	return (true);
}
    184e:	0038      	movs	r0, r7
    1850:	b005      	add	sp, #20
    1852:	bdf0      	pop	{r4, r5, r6, r7, pc}
	crc = (uint16_t) usart_getc() << 8;
    1854:	4e12      	ldr	r6, [pc, #72]	; (18a0 <getPacket+0x74>)
    1856:	47b0      	blx	r6
    1858:	0200      	lsls	r0, r0, #8
    185a:	b284      	uxth	r4, r0
	crc += (uint16_t) usart_getc();
    185c:	47b0      	blx	r6
    185e:	1824      	adds	r4, r4, r0
    1860:	b2a4      	uxth	r4, r4
	if (error_timeout == 1)
    1862:	4b0e      	ldr	r3, [pc, #56]	; (189c <getPacket+0x70>)
    1864:	781b      	ldrb	r3, [r3, #0]
    1866:	2b01      	cmp	r3, #1
    1868:	d0f1      	beq.n	184e <getPacket+0x22>
	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    186a:	42a5      	cmp	r5, r4
    186c:	d104      	bne.n	1878 <getPacket+0x4c>
    186e:	ab03      	add	r3, sp, #12
    1870:	781b      	ldrb	r3, [r3, #0]
    1872:	9a01      	ldr	r2, [sp, #4]
    1874:	4293      	cmp	r3, r2
    1876:	d003      	beq.n	1880 <getPacket+0x54>
		usart_putc(CAN);
    1878:	2018      	movs	r0, #24
    187a:	4b0a      	ldr	r3, [pc, #40]	; (18a4 <getPacket+0x78>)
    187c:	4798      	blx	r3
		return (false);
    187e:	e7e6      	b.n	184e <getPacket+0x22>
	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    1880:	43db      	mvns	r3, r3
    1882:	aa03      	add	r2, sp, #12
    1884:	7852      	ldrb	r2, [r2, #1]
    1886:	b2db      	uxtb	r3, r3
    1888:	429a      	cmp	r2, r3
    188a:	d1f5      	bne.n	1878 <getPacket+0x4c>
	usart_putc(ACK);
    188c:	2006      	movs	r0, #6
    188e:	4b05      	ldr	r3, [pc, #20]	; (18a4 <getPacket+0x78>)
    1890:	4798      	blx	r3
	return (true);
    1892:	2701      	movs	r7, #1
    1894:	e7db      	b.n	184e <getPacket+0x22>
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	00001799 	.word	0x00001799
    189c:	20000190 	.word	0x20000190
    18a0:	000016e9 	.word	0x000016e9
    18a4:	000016c1 	.word	0x000016c1

000018a8 <usart_putdata_xmd>:

/**
 * \brief Called when a transfer from target to host is being made(considered an upload).
 */
uint32_t usart_putdata_xmd(void const* data, uint32_t length) {
    18a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18aa:	46de      	mov	lr, fp
    18ac:	4657      	mov	r7, sl
    18ae:	464e      	mov	r6, r9
    18b0:	4645      	mov	r5, r8
    18b2:	b5e0      	push	{r5, r6, r7, lr}
    18b4:	b085      	sub	sp, #20
    18b6:	0005      	movs	r5, r0
    18b8:	4689      	mov	r9, r1
	uint8_t c, sno = 1;
	uint8_t done;
	uint8_t * ptr_data = (uint8_t *) data;
	error_timeout = 0;
    18ba:	2200      	movs	r2, #0
    18bc:	4b4a      	ldr	r3, [pc, #296]	; (19e8 <usart_putdata_xmd+0x140>)
    18be:	701a      	strb	r2, [r3, #0]
	if (!length)
    18c0:	2900      	cmp	r1, #0
    18c2:	d128      	bne.n	1916 <usart_putdata_xmd+0x6e>
		mode_of_transfer = 1;
    18c4:	3201      	adds	r2, #1
    18c6:	4b49      	ldr	r3, [pc, #292]	; (19ec <usart_putdata_xmd+0x144>)
    18c8:	701a      	strb	r2, [r3, #0]

	/* Startup synchronization... */
	/* Wait to receive a NAK or 'C' from receiver. */
	done = 0;
	while (!done) {
		c = (uint8_t) usart_getc();
    18ca:	4f49      	ldr	r7, [pc, #292]	; (19f0 <usart_putdata_xmd+0x148>)
		if (error_timeout) { // Test for timeout in usart_getc
    18cc:	4e46      	ldr	r6, [pc, #280]	; (19e8 <usart_putdata_xmd+0x140>)
			error_timeout = 0;
    18ce:	0034      	movs	r4, r6
		c = (uint8_t) usart_getc();
    18d0:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    18d2:	7833      	ldrb	r3, [r6, #0]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d12c      	bne.n	1932 <usart_putdata_xmd+0x8a>
		c = (uint8_t) usart_getc();
    18d8:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
				error_timeout = 0;
				return (0);
			}
		}
		switch (c) {
    18da:	2843      	cmp	r0, #67	; 0x43
    18dc:	d003      	beq.n	18e6 <usart_putdata_xmd+0x3e>
    18de:	2871      	cmp	r0, #113	; 0x71
    18e0:	d079      	beq.n	19d6 <usart_putdata_xmd+0x12e>
    18e2:	2815      	cmp	r0, #21
    18e4:	d1f4      	bne.n	18d0 <usart_putdata_xmd+0x28>
    18e6:	9503      	str	r5, [sp, #12]
    18e8:	2301      	movs	r3, #1
    18ea:	9302      	str	r3, [sp, #8]
	usart_putc(SOH);
    18ec:	4b41      	ldr	r3, [pc, #260]	; (19f4 <usart_putdata_xmd+0x14c>)
    18ee:	469b      	mov	fp, r3
		if (size_of_data || mode_of_transfer) {
    18f0:	4b41      	ldr	r3, [pc, #260]	; (19f8 <usart_putdata_xmd+0x150>)
    18f2:	4698      	mov	r8, r3
			size_of_data--;
    18f4:	001c      	movs	r4, r3
		if (size_of_data || mode_of_transfer) {
    18f6:	4b3d      	ldr	r3, [pc, #244]	; (19ec <usart_putdata_xmd+0x144>)
    18f8:	469a      	mov	sl, r3
	usart_putc(SOH);
    18fa:	2001      	movs	r0, #1
    18fc:	47d8      	blx	fp
	usart_putc(sno);
    18fe:	9d02      	ldr	r5, [sp, #8]
    1900:	0028      	movs	r0, r5
    1902:	47d8      	blx	fp
	usart_putc((uint8_t) ~(sno));
    1904:	43e8      	mvns	r0, r5
    1906:	b2c0      	uxtb	r0, r0
    1908:	47d8      	blx	fp
    190a:	9d03      	ldr	r5, [sp, #12]
    190c:	2780      	movs	r7, #128	; 0x80
	chksm = 0;
    190e:	2300      	movs	r3, #0
    1910:	9301      	str	r3, [sp, #4]
    1912:	002e      	movs	r6, r5
    1914:	e02e      	b.n	1974 <usart_putdata_xmd+0xcc>
		size_of_data = length;
    1916:	4b38      	ldr	r3, [pc, #224]	; (19f8 <usart_putdata_xmd+0x150>)
    1918:	8019      	strh	r1, [r3, #0]
		mode_of_transfer = 0;
    191a:	2200      	movs	r2, #0
    191c:	4b33      	ldr	r3, [pc, #204]	; (19ec <usart_putdata_xmd+0x144>)
    191e:	701a      	strb	r2, [r3, #0]
	if (length & (PKTLEN_128 - 1)) {
    1920:	000b      	movs	r3, r1
    1922:	065b      	lsls	r3, r3, #25
    1924:	d0d1      	beq.n	18ca <usart_putdata_xmd+0x22>
		length += PKTLEN_128;
    1926:	000b      	movs	r3, r1
    1928:	3380      	adds	r3, #128	; 0x80
		length &= ~(PKTLEN_128 - 1);
    192a:	327f      	adds	r2, #127	; 0x7f
    192c:	4393      	bics	r3, r2
    192e:	4699      	mov	r9, r3
    1930:	e7cb      	b.n	18ca <usart_putdata_xmd+0x22>
			error_timeout = 0;
    1932:	2300      	movs	r3, #0
    1934:	7023      	strb	r3, [r4, #0]
			c = (uint8_t) usart_getc();
    1936:	4b2e      	ldr	r3, [pc, #184]	; (19f0 <usart_putdata_xmd+0x148>)
    1938:	4798      	blx	r3
    193a:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
    193c:	7823      	ldrb	r3, [r4, #0]
    193e:	2b00      	cmp	r3, #0
    1940:	d0cb      	beq.n	18da <usart_putdata_xmd+0x32>
				error_timeout = 0;
    1942:	2200      	movs	r2, #0
    1944:	4b28      	ldr	r3, [pc, #160]	; (19e8 <usart_putdata_xmd+0x140>)
    1946:	701a      	strb	r2, [r3, #0]
				return (0);
    1948:	2000      	movs	r0, #0
    194a:	e045      	b.n	19d8 <usart_putdata_xmd+0x130>
	done = 0;
	sno = 1;
	while (!done) {
		c = (uint8_t) putPacket((uint8_t *) ptr_data, sno);
		if (error_timeout) { // Test for timeout in usart_getc
			error_timeout = 0;
    194c:	2200      	movs	r2, #0
    194e:	4b26      	ldr	r3, [pc, #152]	; (19e8 <usart_putdata_xmd+0x140>)
    1950:	701a      	strb	r2, [r3, #0]
			return (0);
    1952:	2000      	movs	r0, #0
    1954:	e040      	b.n	19d8 <usart_putdata_xmd+0x130>
			data = *tmppkt++;
    1956:	7835      	ldrb	r5, [r6, #0]
			size_of_data--;
    1958:	3b01      	subs	r3, #1
    195a:	8023      	strh	r3, [r4, #0]
			data = *tmppkt++;
    195c:	3601      	adds	r6, #1
		usart_putc(data);
    195e:	0028      	movs	r0, r5
    1960:	4b24      	ldr	r3, [pc, #144]	; (19f4 <usart_putdata_xmd+0x14c>)
    1962:	4798      	blx	r3
		chksm = add_crc(data, chksm);
    1964:	9901      	ldr	r1, [sp, #4]
    1966:	0028      	movs	r0, r5
    1968:	4b24      	ldr	r3, [pc, #144]	; (19fc <usart_putdata_xmd+0x154>)
    196a:	4798      	blx	r3
    196c:	9001      	str	r0, [sp, #4]
    196e:	3f01      	subs	r7, #1
	for (i = 0; i < PKTLEN_128; i++) {
    1970:	2f00      	cmp	r7, #0
    1972:	d008      	beq.n	1986 <usart_putdata_xmd+0xde>
		if (size_of_data || mode_of_transfer) {
    1974:	4643      	mov	r3, r8
    1976:	881b      	ldrh	r3, [r3, #0]
    1978:	2b00      	cmp	r3, #0
    197a:	d1ec      	bne.n	1956 <usart_putdata_xmd+0xae>
    197c:	4652      	mov	r2, sl
    197e:	7815      	ldrb	r5, [r2, #0]
    1980:	2d00      	cmp	r5, #0
    1982:	d0ec      	beq.n	195e <usart_putdata_xmd+0xb6>
    1984:	e7e7      	b.n	1956 <usart_putdata_xmd+0xae>
	usart_putc((uint8_t) (chksm >> 8));
    1986:	0005      	movs	r5, r0
    1988:	0a00      	lsrs	r0, r0, #8
    198a:	b2c0      	uxtb	r0, r0
    198c:	4e19      	ldr	r6, [pc, #100]	; (19f4 <usart_putdata_xmd+0x14c>)
    198e:	47b0      	blx	r6
	usart_putc((uint8_t) chksm);
    1990:	b2e8      	uxtb	r0, r5
    1992:	47b0      	blx	r6
	return (usart_getc()); /* Wait for ack */
    1994:	4b16      	ldr	r3, [pc, #88]	; (19f0 <usart_putdata_xmd+0x148>)
    1996:	4798      	blx	r3
		if (error_timeout) { // Test for timeout in usart_getc
    1998:	4b13      	ldr	r3, [pc, #76]	; (19e8 <usart_putdata_xmd+0x140>)
    199a:	781b      	ldrb	r3, [r3, #0]
    199c:	2b00      	cmp	r3, #0
    199e:	d1d5      	bne.n	194c <usart_putdata_xmd+0xa4>
		}
		switch (c) {
    19a0:	23ff      	movs	r3, #255	; 0xff
    19a2:	4018      	ands	r0, r3
    19a4:	2806      	cmp	r0, #6
    19a6:	d109      	bne.n	19bc <usart_putdata_xmd+0x114>
		case ACK:
			++sno;
    19a8:	9b02      	ldr	r3, [sp, #8]
    19aa:	3301      	adds	r3, #1
    19ac:	b2db      	uxtb	r3, r3
    19ae:	9302      	str	r3, [sp, #8]
			length -= PKTLEN_128;
    19b0:	464b      	mov	r3, r9
    19b2:	3b80      	subs	r3, #128	; 0x80
    19b4:	4699      	mov	r9, r3
			ptr_data += PKTLEN_128;
    19b6:	9b03      	ldr	r3, [sp, #12]
    19b8:	3380      	adds	r3, #128	; 0x80
    19ba:	9303      	str	r3, [sp, #12]
		case EOT:
		default:
			done = 0;
			break;
		}
		if (!length) {
    19bc:	464b      	mov	r3, r9
    19be:	2b00      	cmp	r3, #0
    19c0:	d19b      	bne.n	18fa <usart_putdata_xmd+0x52>
			usart_putc(EOT);
    19c2:	2004      	movs	r0, #4
    19c4:	4b0b      	ldr	r3, [pc, #44]	; (19f4 <usart_putdata_xmd+0x14c>)
    19c6:	4798      	blx	r3
			usart_getc(); /* Flush the ACK */
    19c8:	4b09      	ldr	r3, [pc, #36]	; (19f0 <usart_putdata_xmd+0x148>)
    19ca:	4798      	blx	r3
			break;
		}
	}

	mode_of_transfer = 0;
    19cc:	2200      	movs	r2, #0
    19ce:	4b07      	ldr	r3, [pc, #28]	; (19ec <usart_putdata_xmd+0x144>)
    19d0:	701a      	strb	r2, [r3, #0]
	return (1);
    19d2:	2001      	movs	r0, #1
    19d4:	e000      	b.n	19d8 <usart_putdata_xmd+0x130>
			return (0);
    19d6:	2000      	movs	r0, #0
}
    19d8:	b005      	add	sp, #20
    19da:	bc3c      	pop	{r2, r3, r4, r5}
    19dc:	4690      	mov	r8, r2
    19de:	4699      	mov	r9, r3
    19e0:	46a2      	mov	sl, r4
    19e2:	46ab      	mov	fp, r5
    19e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	20000190 	.word	0x20000190
    19ec:	20000191 	.word	0x20000191
    19f0:	000016e9 	.word	0x000016e9
    19f4:	000016c1 	.word	0x000016c1
    19f8:	200000d6 	.word	0x200000d6
    19fc:	0000176d 	.word	0x0000176d

00001a00 <usart_getdata_xmd>:

/**
 * \brief Called when a transfer from host to target is being made (considered an download).
 */
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    1a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a02:	46c6      	mov	lr, r8
    1a04:	b500      	push	{lr}
    1a06:	b082      	sub	sp, #8
    1a08:	9001      	str	r0, [sp, #4]
    1a0a:	000c      	movs	r4, r1
	uint8_t * ptr_data = (uint8_t *) data;
	uint32_t b_run, nbr_of_timeout = 100;
	uint8_t sno = 0x01;

	//Copied from legacy source code ... might need some tweaking
	uint32_t loops_per_second = system_clock_source_get_hz(CONF_CLOCK_GCLK_0_CLOCK_SOURCE) / 10;
    1a0c:	2006      	movs	r0, #6
    1a0e:	4b2f      	ldr	r3, [pc, #188]	; (1acc <usart_getdata_xmd+0xcc>)
    1a10:	4798      	blx	r3
    1a12:	210a      	movs	r1, #10
    1a14:	4b2e      	ldr	r3, [pc, #184]	; (1ad0 <usart_getdata_xmd+0xd0>)
    1a16:	4798      	blx	r3
    1a18:	9000      	str	r0, [sp, #0]

	error_timeout = 0;
    1a1a:	2200      	movs	r2, #0
    1a1c:	4b2d      	ldr	r3, [pc, #180]	; (1ad4 <usart_getdata_xmd+0xd4>)
    1a1e:	701a      	strb	r2, [r3, #0]

	if (length == 0)
    1a20:	2c00      	cmp	r4, #0
    1a22:	d106      	bne.n	1a32 <usart_getdata_xmd+0x32>
		mode_of_transfer = 1;
    1a24:	3201      	adds	r2, #1
    1a26:	4b2c      	ldr	r3, [pc, #176]	; (1ad8 <usart_getdata_xmd+0xd8>)
    1a28:	701a      	strb	r2, [r3, #0]
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    1a2a:	2564      	movs	r5, #100	; 0x64
	}

	/* Startup synchronization... */
	/* Continuously send NAK or 'C' until sender responds. */
	while (1) {
		usart_putc('C');
    1a2c:	4e2b      	ldr	r6, [pc, #172]	; (1adc <usart_getdata_xmd+0xdc>)
		timeout = loops_per_second;
		while (!(usart_is_rx_ready()) && timeout)
    1a2e:	4f2c      	ldr	r7, [pc, #176]	; (1ae0 <usart_getdata_xmd+0xe0>)
    1a30:	e00e      	b.n	1a50 <usart_getdata_xmd+0x50>
		size_of_data = length;
    1a32:	4b2c      	ldr	r3, [pc, #176]	; (1ae4 <usart_getdata_xmd+0xe4>)
    1a34:	801c      	strh	r4, [r3, #0]
		mode_of_transfer = 0;
    1a36:	2200      	movs	r2, #0
    1a38:	4b27      	ldr	r3, [pc, #156]	; (1ad8 <usart_getdata_xmd+0xd8>)
    1a3a:	701a      	strb	r2, [r3, #0]
    1a3c:	e7f5      	b.n	1a2a <usart_getdata_xmd+0x2a>
			timeout--;
    1a3e:	3c01      	subs	r4, #1
		while (!(usart_is_rx_ready()) && timeout)
    1a40:	47b8      	blx	r7
    1a42:	2800      	cmp	r0, #0
    1a44:	d108      	bne.n	1a58 <usart_getdata_xmd+0x58>
    1a46:	2c00      	cmp	r4, #0
    1a48:	d1f9      	bne.n	1a3e <usart_getdata_xmd+0x3e>
    1a4a:	3d01      	subs	r5, #1
		if (timeout)
			break;

		if (!(--nbr_of_timeout))
    1a4c:	2d00      	cmp	r5, #0
    1a4e:	d03b      	beq.n	1ac8 <usart_getdata_xmd+0xc8>
		usart_putc('C');
    1a50:	2043      	movs	r0, #67	; 0x43
    1a52:	47b0      	blx	r6
		timeout = loops_per_second;
    1a54:	9c00      	ldr	r4, [sp, #0]
		while (!(usart_is_rx_ready()) && timeout)
    1a56:	e7f3      	b.n	1a40 <usart_getdata_xmd+0x40>
		if (timeout)
    1a58:	2c00      	cmp	r4, #0
    1a5a:	d0f6      	beq.n	1a4a <usart_getdata_xmd+0x4a>
    1a5c:	9e01      	ldr	r6, [sp, #4]
    1a5e:	2401      	movs	r4, #1
			return (0);
	}

	b_run = true;
	while (b_run != false) {
		c = (char) usart_getc();
    1a60:	4f21      	ldr	r7, [pc, #132]	; (1ae8 <usart_getdata_xmd+0xe8>)
		if (error_timeout) { // Test for timeout in usart_getc
    1a62:	4d1c      	ldr	r5, [pc, #112]	; (1ad4 <usart_getdata_xmd+0xd4>)
			error_timeout = 0;
			return (0);
		}
		switch (c) {
		case SOH: /* 128-byte incoming packet */
			b_run = getPacket(ptr_data, sno);
    1a64:	4b21      	ldr	r3, [pc, #132]	; (1aec <usart_getdata_xmd+0xec>)
    1a66:	4698      	mov	r8, r3
    1a68:	e012      	b.n	1a90 <usart_getdata_xmd+0x90>
			error_timeout = 0;
    1a6a:	2200      	movs	r2, #0
    1a6c:	4b19      	ldr	r3, [pc, #100]	; (1ad4 <usart_getdata_xmd+0xd4>)
    1a6e:	701a      	strb	r2, [r3, #0]
			return (0);
    1a70:	2000      	movs	r0, #0
			break;
		}
	}
	mode_of_transfer = 0;
	return (true);
}
    1a72:	b002      	add	sp, #8
    1a74:	bc04      	pop	{r2}
    1a76:	4690      	mov	r8, r2
    1a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
			b_run = getPacket(ptr_data, sno);
    1a7a:	0021      	movs	r1, r4
    1a7c:	0030      	movs	r0, r6
    1a7e:	47c0      	blx	r8
			if (error_timeout) { // Test for timeout in usart_getc
    1a80:	4b14      	ldr	r3, [pc, #80]	; (1ad4 <usart_getdata_xmd+0xd4>)
    1a82:	781b      	ldrb	r3, [r3, #0]
    1a84:	2b00      	cmp	r3, #0
    1a86:	d112      	bne.n	1aae <usart_getdata_xmd+0xae>
			if (b_run == true) {
    1a88:	2801      	cmp	r0, #1
    1a8a:	d015      	beq.n	1ab8 <usart_getdata_xmd+0xb8>
	while (b_run != false) {
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d009      	beq.n	1aa4 <usart_getdata_xmd+0xa4>
		c = (char) usart_getc();
    1a90:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    1a92:	782b      	ldrb	r3, [r5, #0]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d1e8      	bne.n	1a6a <usart_getdata_xmd+0x6a>
		switch (c) {
    1a98:	23ff      	movs	r3, #255	; 0xff
    1a9a:	4018      	ands	r0, r3
    1a9c:	2801      	cmp	r0, #1
    1a9e:	d0ec      	beq.n	1a7a <usart_getdata_xmd+0x7a>
    1aa0:	2804      	cmp	r0, #4
    1aa2:	d00d      	beq.n	1ac0 <usart_getdata_xmd+0xc0>
	mode_of_transfer = 0;
    1aa4:	2200      	movs	r2, #0
    1aa6:	4b0c      	ldr	r3, [pc, #48]	; (1ad8 <usart_getdata_xmd+0xd8>)
    1aa8:	701a      	strb	r2, [r3, #0]
	return (true);
    1aaa:	2001      	movs	r0, #1
    1aac:	e7e1      	b.n	1a72 <usart_getdata_xmd+0x72>
				error_timeout = 0;
    1aae:	2200      	movs	r2, #0
    1ab0:	4b08      	ldr	r3, [pc, #32]	; (1ad4 <usart_getdata_xmd+0xd4>)
    1ab2:	701a      	strb	r2, [r3, #0]
				return (0);
    1ab4:	2000      	movs	r0, #0
    1ab6:	e7dc      	b.n	1a72 <usart_getdata_xmd+0x72>
				++sno;
    1ab8:	3401      	adds	r4, #1
    1aba:	b2e4      	uxtb	r4, r4
				ptr_data += PKTLEN_128;
    1abc:	3680      	adds	r6, #128	; 0x80
    1abe:	e7e7      	b.n	1a90 <usart_getdata_xmd+0x90>
			usart_putc(ACK);
    1ac0:	2006      	movs	r0, #6
    1ac2:	4b06      	ldr	r3, [pc, #24]	; (1adc <usart_getdata_xmd+0xdc>)
    1ac4:	4798      	blx	r3
    1ac6:	e7ed      	b.n	1aa4 <usart_getdata_xmd+0xa4>
			return (0);
    1ac8:	2000      	movs	r0, #0
    1aca:	e7d2      	b.n	1a72 <usart_getdata_xmd+0x72>
    1acc:	00000c05 	.word	0x00000c05
    1ad0:	00001af1 	.word	0x00001af1
    1ad4:	20000190 	.word	0x20000190
    1ad8:	20000191 	.word	0x20000191
    1adc:	000016c1 	.word	0x000016c1
    1ae0:	000016d9 	.word	0x000016d9
    1ae4:	200000d6 	.word	0x200000d6
    1ae8:	000016e9 	.word	0x000016e9
    1aec:	0000182d 	.word	0x0000182d

00001af0 <__udivsi3>:
    1af0:	2200      	movs	r2, #0
    1af2:	0843      	lsrs	r3, r0, #1
    1af4:	428b      	cmp	r3, r1
    1af6:	d374      	bcc.n	1be2 <__udivsi3+0xf2>
    1af8:	0903      	lsrs	r3, r0, #4
    1afa:	428b      	cmp	r3, r1
    1afc:	d35f      	bcc.n	1bbe <__udivsi3+0xce>
    1afe:	0a03      	lsrs	r3, r0, #8
    1b00:	428b      	cmp	r3, r1
    1b02:	d344      	bcc.n	1b8e <__udivsi3+0x9e>
    1b04:	0b03      	lsrs	r3, r0, #12
    1b06:	428b      	cmp	r3, r1
    1b08:	d328      	bcc.n	1b5c <__udivsi3+0x6c>
    1b0a:	0c03      	lsrs	r3, r0, #16
    1b0c:	428b      	cmp	r3, r1
    1b0e:	d30d      	bcc.n	1b2c <__udivsi3+0x3c>
    1b10:	22ff      	movs	r2, #255	; 0xff
    1b12:	0209      	lsls	r1, r1, #8
    1b14:	ba12      	rev	r2, r2
    1b16:	0c03      	lsrs	r3, r0, #16
    1b18:	428b      	cmp	r3, r1
    1b1a:	d302      	bcc.n	1b22 <__udivsi3+0x32>
    1b1c:	1212      	asrs	r2, r2, #8
    1b1e:	0209      	lsls	r1, r1, #8
    1b20:	d065      	beq.n	1bee <__udivsi3+0xfe>
    1b22:	0b03      	lsrs	r3, r0, #12
    1b24:	428b      	cmp	r3, r1
    1b26:	d319      	bcc.n	1b5c <__udivsi3+0x6c>
    1b28:	e000      	b.n	1b2c <__udivsi3+0x3c>
    1b2a:	0a09      	lsrs	r1, r1, #8
    1b2c:	0bc3      	lsrs	r3, r0, #15
    1b2e:	428b      	cmp	r3, r1
    1b30:	d301      	bcc.n	1b36 <__udivsi3+0x46>
    1b32:	03cb      	lsls	r3, r1, #15
    1b34:	1ac0      	subs	r0, r0, r3
    1b36:	4152      	adcs	r2, r2
    1b38:	0b83      	lsrs	r3, r0, #14
    1b3a:	428b      	cmp	r3, r1
    1b3c:	d301      	bcc.n	1b42 <__udivsi3+0x52>
    1b3e:	038b      	lsls	r3, r1, #14
    1b40:	1ac0      	subs	r0, r0, r3
    1b42:	4152      	adcs	r2, r2
    1b44:	0b43      	lsrs	r3, r0, #13
    1b46:	428b      	cmp	r3, r1
    1b48:	d301      	bcc.n	1b4e <__udivsi3+0x5e>
    1b4a:	034b      	lsls	r3, r1, #13
    1b4c:	1ac0      	subs	r0, r0, r3
    1b4e:	4152      	adcs	r2, r2
    1b50:	0b03      	lsrs	r3, r0, #12
    1b52:	428b      	cmp	r3, r1
    1b54:	d301      	bcc.n	1b5a <__udivsi3+0x6a>
    1b56:	030b      	lsls	r3, r1, #12
    1b58:	1ac0      	subs	r0, r0, r3
    1b5a:	4152      	adcs	r2, r2
    1b5c:	0ac3      	lsrs	r3, r0, #11
    1b5e:	428b      	cmp	r3, r1
    1b60:	d301      	bcc.n	1b66 <__udivsi3+0x76>
    1b62:	02cb      	lsls	r3, r1, #11
    1b64:	1ac0      	subs	r0, r0, r3
    1b66:	4152      	adcs	r2, r2
    1b68:	0a83      	lsrs	r3, r0, #10
    1b6a:	428b      	cmp	r3, r1
    1b6c:	d301      	bcc.n	1b72 <__udivsi3+0x82>
    1b6e:	028b      	lsls	r3, r1, #10
    1b70:	1ac0      	subs	r0, r0, r3
    1b72:	4152      	adcs	r2, r2
    1b74:	0a43      	lsrs	r3, r0, #9
    1b76:	428b      	cmp	r3, r1
    1b78:	d301      	bcc.n	1b7e <__udivsi3+0x8e>
    1b7a:	024b      	lsls	r3, r1, #9
    1b7c:	1ac0      	subs	r0, r0, r3
    1b7e:	4152      	adcs	r2, r2
    1b80:	0a03      	lsrs	r3, r0, #8
    1b82:	428b      	cmp	r3, r1
    1b84:	d301      	bcc.n	1b8a <__udivsi3+0x9a>
    1b86:	020b      	lsls	r3, r1, #8
    1b88:	1ac0      	subs	r0, r0, r3
    1b8a:	4152      	adcs	r2, r2
    1b8c:	d2cd      	bcs.n	1b2a <__udivsi3+0x3a>
    1b8e:	09c3      	lsrs	r3, r0, #7
    1b90:	428b      	cmp	r3, r1
    1b92:	d301      	bcc.n	1b98 <__udivsi3+0xa8>
    1b94:	01cb      	lsls	r3, r1, #7
    1b96:	1ac0      	subs	r0, r0, r3
    1b98:	4152      	adcs	r2, r2
    1b9a:	0983      	lsrs	r3, r0, #6
    1b9c:	428b      	cmp	r3, r1
    1b9e:	d301      	bcc.n	1ba4 <__udivsi3+0xb4>
    1ba0:	018b      	lsls	r3, r1, #6
    1ba2:	1ac0      	subs	r0, r0, r3
    1ba4:	4152      	adcs	r2, r2
    1ba6:	0943      	lsrs	r3, r0, #5
    1ba8:	428b      	cmp	r3, r1
    1baa:	d301      	bcc.n	1bb0 <__udivsi3+0xc0>
    1bac:	014b      	lsls	r3, r1, #5
    1bae:	1ac0      	subs	r0, r0, r3
    1bb0:	4152      	adcs	r2, r2
    1bb2:	0903      	lsrs	r3, r0, #4
    1bb4:	428b      	cmp	r3, r1
    1bb6:	d301      	bcc.n	1bbc <__udivsi3+0xcc>
    1bb8:	010b      	lsls	r3, r1, #4
    1bba:	1ac0      	subs	r0, r0, r3
    1bbc:	4152      	adcs	r2, r2
    1bbe:	08c3      	lsrs	r3, r0, #3
    1bc0:	428b      	cmp	r3, r1
    1bc2:	d301      	bcc.n	1bc8 <__udivsi3+0xd8>
    1bc4:	00cb      	lsls	r3, r1, #3
    1bc6:	1ac0      	subs	r0, r0, r3
    1bc8:	4152      	adcs	r2, r2
    1bca:	0883      	lsrs	r3, r0, #2
    1bcc:	428b      	cmp	r3, r1
    1bce:	d301      	bcc.n	1bd4 <__udivsi3+0xe4>
    1bd0:	008b      	lsls	r3, r1, #2
    1bd2:	1ac0      	subs	r0, r0, r3
    1bd4:	4152      	adcs	r2, r2
    1bd6:	0843      	lsrs	r3, r0, #1
    1bd8:	428b      	cmp	r3, r1
    1bda:	d301      	bcc.n	1be0 <__udivsi3+0xf0>
    1bdc:	004b      	lsls	r3, r1, #1
    1bde:	1ac0      	subs	r0, r0, r3
    1be0:	4152      	adcs	r2, r2
    1be2:	1a41      	subs	r1, r0, r1
    1be4:	d200      	bcs.n	1be8 <__udivsi3+0xf8>
    1be6:	4601      	mov	r1, r0
    1be8:	4152      	adcs	r2, r2
    1bea:	4610      	mov	r0, r2
    1bec:	4770      	bx	lr
    1bee:	e7ff      	b.n	1bf0 <__udivsi3+0x100>
    1bf0:	b501      	push	{r0, lr}
    1bf2:	2000      	movs	r0, #0
    1bf4:	f000 f806 	bl	1c04 <__aeabi_idiv0>
    1bf8:	bd02      	pop	{r1, pc}
    1bfa:	46c0      	nop			; (mov r8, r8)

00001bfc <__aeabi_uidivmod>:
    1bfc:	2900      	cmp	r1, #0
    1bfe:	d0f7      	beq.n	1bf0 <__udivsi3+0x100>
    1c00:	e776      	b.n	1af0 <__udivsi3>
    1c02:	4770      	bx	lr

00001c04 <__aeabi_idiv0>:
    1c04:	4770      	bx	lr
    1c06:	46c0      	nop			; (mov r8, r8)

00001c08 <__aeabi_lmul>:
    1c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0a:	46ce      	mov	lr, r9
    1c0c:	4647      	mov	r7, r8
    1c0e:	0415      	lsls	r5, r2, #16
    1c10:	0c2d      	lsrs	r5, r5, #16
    1c12:	002e      	movs	r6, r5
    1c14:	b580      	push	{r7, lr}
    1c16:	0407      	lsls	r7, r0, #16
    1c18:	0c14      	lsrs	r4, r2, #16
    1c1a:	0c3f      	lsrs	r7, r7, #16
    1c1c:	4699      	mov	r9, r3
    1c1e:	0c03      	lsrs	r3, r0, #16
    1c20:	437e      	muls	r6, r7
    1c22:	435d      	muls	r5, r3
    1c24:	4367      	muls	r7, r4
    1c26:	4363      	muls	r3, r4
    1c28:	197f      	adds	r7, r7, r5
    1c2a:	0c34      	lsrs	r4, r6, #16
    1c2c:	19e4      	adds	r4, r4, r7
    1c2e:	469c      	mov	ip, r3
    1c30:	42a5      	cmp	r5, r4
    1c32:	d903      	bls.n	1c3c <__aeabi_lmul+0x34>
    1c34:	2380      	movs	r3, #128	; 0x80
    1c36:	025b      	lsls	r3, r3, #9
    1c38:	4698      	mov	r8, r3
    1c3a:	44c4      	add	ip, r8
    1c3c:	464b      	mov	r3, r9
    1c3e:	4351      	muls	r1, r2
    1c40:	4343      	muls	r3, r0
    1c42:	0436      	lsls	r6, r6, #16
    1c44:	0c36      	lsrs	r6, r6, #16
    1c46:	0c25      	lsrs	r5, r4, #16
    1c48:	0424      	lsls	r4, r4, #16
    1c4a:	4465      	add	r5, ip
    1c4c:	19a4      	adds	r4, r4, r6
    1c4e:	1859      	adds	r1, r3, r1
    1c50:	1949      	adds	r1, r1, r5
    1c52:	0020      	movs	r0, r4
    1c54:	bc0c      	pop	{r2, r3}
    1c56:	4690      	mov	r8, r2
    1c58:	4699      	mov	r9, r3
    1c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c5c <__libc_init_array>:
    1c5c:	b570      	push	{r4, r5, r6, lr}
    1c5e:	2600      	movs	r6, #0
    1c60:	4d0c      	ldr	r5, [pc, #48]	; (1c94 <__libc_init_array+0x38>)
    1c62:	4c0d      	ldr	r4, [pc, #52]	; (1c98 <__libc_init_array+0x3c>)
    1c64:	1b64      	subs	r4, r4, r5
    1c66:	10a4      	asrs	r4, r4, #2
    1c68:	42a6      	cmp	r6, r4
    1c6a:	d109      	bne.n	1c80 <__libc_init_array+0x24>
    1c6c:	2600      	movs	r6, #0
    1c6e:	f000 f85b 	bl	1d28 <_init>
    1c72:	4d0a      	ldr	r5, [pc, #40]	; (1c9c <__libc_init_array+0x40>)
    1c74:	4c0a      	ldr	r4, [pc, #40]	; (1ca0 <__libc_init_array+0x44>)
    1c76:	1b64      	subs	r4, r4, r5
    1c78:	10a4      	asrs	r4, r4, #2
    1c7a:	42a6      	cmp	r6, r4
    1c7c:	d105      	bne.n	1c8a <__libc_init_array+0x2e>
    1c7e:	bd70      	pop	{r4, r5, r6, pc}
    1c80:	00b3      	lsls	r3, r6, #2
    1c82:	58eb      	ldr	r3, [r5, r3]
    1c84:	4798      	blx	r3
    1c86:	3601      	adds	r6, #1
    1c88:	e7ee      	b.n	1c68 <__libc_init_array+0xc>
    1c8a:	00b3      	lsls	r3, r6, #2
    1c8c:	58eb      	ldr	r3, [r5, r3]
    1c8e:	4798      	blx	r3
    1c90:	3601      	adds	r6, #1
    1c92:	e7f2      	b.n	1c7a <__libc_init_array+0x1e>
    1c94:	00001d34 	.word	0x00001d34
    1c98:	00001d34 	.word	0x00001d34
    1c9c:	00001d34 	.word	0x00001d34
    1ca0:	00001d38 	.word	0x00001d38
    1ca4:	42000400 	.word	0x42000400
    1ca8:	42000800 	.word	0x42000800
    1cac:	42000c00 	.word	0x42000c00
    1cb0:	42001000 	.word	0x42001000
    1cb4:	42001400 	.word	0x42001400
    1cb8:	42001800 	.word	0x42001800
    1cbc:	00000c16 	.word	0x00000c16
    1cc0:	00000c12 	.word	0x00000c12
    1cc4:	00000c12 	.word	0x00000c12
    1cc8:	00000c44 	.word	0x00000c44
    1ccc:	00000c44 	.word	0x00000c44
    1cd0:	00000c2e 	.word	0x00000c2e
    1cd4:	00000c1c 	.word	0x00000c1c
    1cd8:	00000c34 	.word	0x00000c34

00001cdc <RomBOOT_Version>:
    1cdc:	36312e32 00000000 00000d0a 00000076     2.16........v...
    1cec:	00000020 20626546 32203032 00313230      ...Feb 20 2021.
    1cfc:	313a3332 34313a39 00000000 0000003e     23:19:14....>...

00001d0c <uart_if>:
    1d0c:	000016c1 000016e9 000016d9 00001739     ............9...
    1d1c:	00001759 000018a9 00001a01              Y...........

00001d28 <_init>:
    1d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d2e:	bc08      	pop	{r3}
    1d30:	469e      	mov	lr, r3
    1d32:	4770      	bx	lr

00001d34 <__init_array_start>:
    1d34:	000000e5 	.word	0x000000e5

00001d38 <_fini>:
    1d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d3e:	bc08      	pop	{r3}
    1d40:	469e      	mov	lr, r3
    1d42:	4770      	bx	lr

00001d44 <__fini_array_start>:
    1d44:	000000bd 	.word	0x000000bd
